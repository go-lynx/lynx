// 指定本 Protocol Buffers 文件使用的语法版本

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.29.3
// source: redis.proto

// 生成代码所使用的包名

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义 Redis 配置消息类型
type Redis struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// —— 基础连接 ——
	// 网络类型（如：tcp）
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// 地址列表，支持单机/集群/哨兵
	Addrs []string `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
	// ACL 用户名
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// 访问 Redis 的密码
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// 使用的数据库编号
	Db int32 `protobuf:"varint,5,opt,name=db,proto3" json:"db,omitempty"`
	// 客户端名称（在 Redis CLIENT LIST 中可见）
	ClientName string `protobuf:"bytes,6,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	// —— 连接池与连接生命周期 ——
	// 连接池最小空闲连接数
	MinIdleConns int32 `protobuf:"varint,7,opt,name=min_idle_conns,json=minIdleConns,proto3" json:"min_idle_conns,omitempty"`
	// 连接池最大空闲连接数
	MaxIdleConns int32 `protobuf:"varint,8,opt,name=max_idle_conns,json=maxIdleConns,proto3" json:"max_idle_conns,omitempty"`
	// 连接池最大活跃连接数（映射为 go-redis 的 PoolSize）
	MaxActiveConns int32 `protobuf:"varint,9,opt,name=max_active_conns,json=maxActiveConns,proto3" json:"max_active_conns,omitempty"`
	// 连接最大空闲时间
	ConnMaxIdleTime *durationpb.Duration `protobuf:"bytes,10,opt,name=conn_max_idle_time,json=connMaxIdleTime,proto3" json:"conn_max_idle_time,omitempty"`
	// 连接空闲超时
	IdleTimeout *durationpb.Duration `protobuf:"bytes,11,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// 连接最大存活时间
	MaxConnAge *durationpb.Duration `protobuf:"bytes,12,opt,name=max_conn_age,json=maxConnAge,proto3" json:"max_conn_age,omitempty"`
	// 当所有连接都繁忙时的等待超时（连接池超时）
	PoolTimeout *durationpb.Duration `protobuf:"bytes,13,opt,name=pool_timeout,json=poolTimeout,proto3" json:"pool_timeout,omitempty"`
	// —— 超时配置 ——
	// 建连超时时间
	DialTimeout *durationpb.Duration `protobuf:"bytes,14,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`
	// 读超时时间
	ReadTimeout *durationpb.Duration `protobuf:"bytes,15,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
	// 写超时时间
	WriteTimeout *durationpb.Duration `protobuf:"bytes,16,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
	// —— 重试配置 ——
	// 最大重试次数
	MaxRetries int32 `protobuf:"varint,17,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// 最小重试退避
	MinRetryBackoff *durationpb.Duration `protobuf:"bytes,18,opt,name=min_retry_backoff,json=minRetryBackoff,proto3" json:"min_retry_backoff,omitempty"`
	// 最大重试退避
	MaxRetryBackoff *durationpb.Duration `protobuf:"bytes,19,opt,name=max_retry_backoff,json=maxRetryBackoff,proto3" json:"max_retry_backoff,omitempty"`
	Tls             *Redis_TLS           `protobuf:"bytes,20,opt,name=tls,proto3" json:"tls,omitempty"`
	Sentinel        *Redis_Sentinel      `protobuf:"bytes,21,opt,name=sentinel,proto3" json:"sentinel,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Redis) Reset() {
	*x = Redis{}
	mi := &file_redis_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_redis_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_redis_proto_rawDescGZIP(), []int{0}
}

func (x *Redis) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Redis) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *Redis) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Redis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Redis) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *Redis) GetMinIdleConns() int32 {
	if x != nil {
		return x.MinIdleConns
	}
	return 0
}

func (x *Redis) GetMaxIdleConns() int32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *Redis) GetMaxActiveConns() int32 {
	if x != nil {
		return x.MaxActiveConns
	}
	return 0
}

func (x *Redis) GetConnMaxIdleTime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return nil
}

func (x *Redis) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *Redis) GetMaxConnAge() *durationpb.Duration {
	if x != nil {
		return x.MaxConnAge
	}
	return nil
}

func (x *Redis) GetPoolTimeout() *durationpb.Duration {
	if x != nil {
		return x.PoolTimeout
	}
	return nil
}

func (x *Redis) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *Redis) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Redis) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *Redis) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *Redis) GetMinRetryBackoff() *durationpb.Duration {
	if x != nil {
		return x.MinRetryBackoff
	}
	return nil
}

func (x *Redis) GetMaxRetryBackoff() *durationpb.Duration {
	if x != nil {
		return x.MaxRetryBackoff
	}
	return nil
}

func (x *Redis) GetTls() *Redis_TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Redis) GetSentinel() *Redis_Sentinel {
	if x != nil {
		return x.Sentinel
	}
	return nil
}

// TLS 选项
type Redis_TLS struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 是否启用 TLS
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// 是否跳过证书校验（仅用于测试环境）
	InsecureSkipVerify bool `protobuf:"varint,2,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Redis_TLS) Reset() {
	*x = Redis_TLS{}
	mi := &file_redis_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Redis_TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis_TLS) ProtoMessage() {}

func (x *Redis_TLS) ProtoReflect() protoreflect.Message {
	mi := &file_redis_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis_TLS.ProtoReflect.Descriptor instead.
func (*Redis_TLS) Descriptor() ([]byte, []int) {
	return file_redis_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Redis_TLS) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Redis_TLS) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

// 哨兵模式选项
type Redis_Sentinel struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 主节点名称（哨兵监控的 master 名称）
	MasterName string `protobuf:"bytes,1,opt,name=master_name,json=masterName,proto3" json:"master_name,omitempty"`
	// 可选：专用的哨兵地址列表；为空时使用 addrs
	Addrs         []string `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Redis_Sentinel) Reset() {
	*x = Redis_Sentinel{}
	mi := &file_redis_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Redis_Sentinel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis_Sentinel) ProtoMessage() {}

func (x *Redis_Sentinel) ProtoReflect() protoreflect.Message {
	mi := &file_redis_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis_Sentinel.ProtoReflect.Descriptor instead.
func (*Redis_Sentinel) Descriptor() ([]byte, []int) {
	return file_redis_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Redis_Sentinel) GetMasterName() string {
	if x != nil {
		return x.MasterName
	}
	return ""
}

func (x *Redis_Sentinel) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

var File_redis_proto protoreflect.FileDescriptor

const file_redis_proto_rawDesc = "" +
	"\n" +
	"\vredis.proto\x12\x1alynx.protobuf.plugin.redis\x1a\x1egoogle/protobuf/duration.proto\"\x99\t\n" +
	"\x05redis\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x14\n" +
	"\x05addrs\x18\x02 \x03(\tR\x05addrs\x12\x1a\n" +
	"\busername\x18\x03 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12\x0e\n" +
	"\x02db\x18\x05 \x01(\x05R\x02db\x12\x1f\n" +
	"\vclient_name\x18\x06 \x01(\tR\n" +
	"clientName\x12$\n" +
	"\x0emin_idle_conns\x18\a \x01(\x05R\fminIdleConns\x12$\n" +
	"\x0emax_idle_conns\x18\b \x01(\x05R\fmaxIdleConns\x12(\n" +
	"\x10max_active_conns\x18\t \x01(\x05R\x0emaxActiveConns\x12F\n" +
	"\x12conn_max_idle_time\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationR\x0fconnMaxIdleTime\x12<\n" +
	"\fidle_timeout\x18\v \x01(\v2\x19.google.protobuf.DurationR\vidleTimeout\x12;\n" +
	"\fmax_conn_age\x18\f \x01(\v2\x19.google.protobuf.DurationR\n" +
	"maxConnAge\x12<\n" +
	"\fpool_timeout\x18\r \x01(\v2\x19.google.protobuf.DurationR\vpoolTimeout\x12<\n" +
	"\fdial_timeout\x18\x0e \x01(\v2\x19.google.protobuf.DurationR\vdialTimeout\x12<\n" +
	"\fread_timeout\x18\x0f \x01(\v2\x19.google.protobuf.DurationR\vreadTimeout\x12>\n" +
	"\rwrite_timeout\x18\x10 \x01(\v2\x19.google.protobuf.DurationR\fwriteTimeout\x12\x1f\n" +
	"\vmax_retries\x18\x11 \x01(\x05R\n" +
	"maxRetries\x12E\n" +
	"\x11min_retry_backoff\x18\x12 \x01(\v2\x19.google.protobuf.DurationR\x0fminRetryBackoff\x12E\n" +
	"\x11max_retry_backoff\x18\x13 \x01(\v2\x19.google.protobuf.DurationR\x0fmaxRetryBackoff\x127\n" +
	"\x03tls\x18\x14 \x01(\v2%.lynx.protobuf.plugin.redis.redis.TLSR\x03tls\x12F\n" +
	"\bsentinel\x18\x15 \x01(\v2*.lynx.protobuf.plugin.redis.redis.SentinelR\bsentinel\x1aQ\n" +
	"\x03TLS\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x120\n" +
	"\x14insecure_skip_verify\x18\x02 \x01(\bR\x12insecureSkipVerify\x1aA\n" +
	"\bSentinel\x12\x1f\n" +
	"\vmaster_name\x18\x01 \x01(\tR\n" +
	"masterName\x12\x14\n" +
	"\x05addrs\x18\x02 \x03(\tR\x05addrsB7Z5github.com/go-lynx/lynx/plugins/nosql/redis/conf;confb\x06proto3"

var (
	file_redis_proto_rawDescOnce sync.Once
	file_redis_proto_rawDescData []byte
)

func file_redis_proto_rawDescGZIP() []byte {
	file_redis_proto_rawDescOnce.Do(func() {
		file_redis_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_redis_proto_rawDesc), len(file_redis_proto_rawDesc)))
	})
	return file_redis_proto_rawDescData
}

var file_redis_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_redis_proto_goTypes = []any{
	(*Redis)(nil),               // 0: lynx.protobuf.plugin.redis.redis
	(*Redis_TLS)(nil),           // 1: lynx.protobuf.plugin.redis.redis.TLS
	(*Redis_Sentinel)(nil),      // 2: lynx.protobuf.plugin.redis.redis.Sentinel
	(*durationpb.Duration)(nil), // 3: google.protobuf.Duration
}
var file_redis_proto_depIdxs = []int32{
	3,  // 0: lynx.protobuf.plugin.redis.redis.conn_max_idle_time:type_name -> google.protobuf.Duration
	3,  // 1: lynx.protobuf.plugin.redis.redis.idle_timeout:type_name -> google.protobuf.Duration
	3,  // 2: lynx.protobuf.plugin.redis.redis.max_conn_age:type_name -> google.protobuf.Duration
	3,  // 3: lynx.protobuf.plugin.redis.redis.pool_timeout:type_name -> google.protobuf.Duration
	3,  // 4: lynx.protobuf.plugin.redis.redis.dial_timeout:type_name -> google.protobuf.Duration
	3,  // 5: lynx.protobuf.plugin.redis.redis.read_timeout:type_name -> google.protobuf.Duration
	3,  // 6: lynx.protobuf.plugin.redis.redis.write_timeout:type_name -> google.protobuf.Duration
	3,  // 7: lynx.protobuf.plugin.redis.redis.min_retry_backoff:type_name -> google.protobuf.Duration
	3,  // 8: lynx.protobuf.plugin.redis.redis.max_retry_backoff:type_name -> google.protobuf.Duration
	1,  // 9: lynx.protobuf.plugin.redis.redis.tls:type_name -> lynx.protobuf.plugin.redis.redis.TLS
	2,  // 10: lynx.protobuf.plugin.redis.redis.sentinel:type_name -> lynx.protobuf.plugin.redis.redis.Sentinel
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_redis_proto_init() }
func file_redis_proto_init() {
	if File_redis_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_redis_proto_rawDesc), len(file_redis_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_redis_proto_goTypes,
		DependencyIndexes: file_redis_proto_depIdxs,
		MessageInfos:      file_redis_proto_msgTypes,
	}.Build()
	File_redis_proto = out.File
	file_redis_proto_goTypes = nil
	file_redis_proto_depIdxs = nil
}
