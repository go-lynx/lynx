// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: polaris.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Polaris message defines configuration information for Polaris services.
// Polaris is a cloud-native service discovery and governance center. This message is used to configure parameters required for interacting with Polaris.
type Polaris struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// namespace represents the namespace in Polaris.
	// Namespaces are used to isolate services and configurations of different environments or businesses. Each service and configuration belongs to a specific namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// token is the authentication token used to access Polaris services.
	// This token is used to verify the identity of the client, ensuring that only authorized clients can access Polaris services and configurations.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// weight represents the weight of the service instance.
	// During load balancing, weight affects the proportion of traffic distribution. Higher weight means more traffic may be allocated.
	Weight int32 `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	// ttl is the Time To Live of the service instance, in seconds.
	// Polaris periodically checks the health status of service instances based on this value. If no heartbeat is received beyond this time, the instance may be marked as unhealthy.
	Ttl int32 `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// timeout is the timeout period for interacting with Polaris services.
	// If no response is received within this time after sending a request to Polaris services, the request is considered timed out.
	Timeout *durationpb.Duration `protobuf:"bytes,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// config_path is the path to the Polaris SDK configuration file.
	// If empty, default configuration will be used. It is recommended to use a polaris.yaml file for detailed configuration.
	ConfigPath string `protobuf:"bytes,7,opt,name=config_path,json=configPath,proto3" json:"config_path,omitempty"`
	// enable_health_check whether to enable health check.
	// When enabled, it will automatically check the health status of service instances.
	EnableHealthCheck bool `protobuf:"varint,8,opt,name=enable_health_check,json=enableHealthCheck,proto3" json:"enable_health_check,omitempty"`
	// health_check_interval health check interval time.
	HealthCheckInterval *durationpb.Duration `protobuf:"bytes,9,opt,name=health_check_interval,json=healthCheckInterval,proto3" json:"health_check_interval,omitempty"`
	// enable_metrics whether to enable monitoring metrics.
	// When enabled, it will collect and report various monitoring metrics.
	EnableMetrics bool `protobuf:"varint,10,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics,omitempty"`
	// enable_retry whether to enable retry mechanism.
	// When enabled, it will automatically retry when connection fails.
	EnableRetry bool `protobuf:"varint,11,opt,name=enable_retry,json=enableRetry,proto3" json:"enable_retry,omitempty"`
	// max_retry_times maximum number of retries.
	MaxRetryTimes int32 `protobuf:"varint,12,opt,name=max_retry_times,json=maxRetryTimes,proto3" json:"max_retry_times,omitempty"`
	// retry_interval retry interval time.
	RetryInterval *durationpb.Duration `protobuf:"bytes,13,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval,omitempty"`
	// enable_circuit_breaker whether to enable circuit breaker.
	// When enabled, it will automatically break when services are unavailable.
	EnableCircuitBreaker bool `protobuf:"varint,14,opt,name=enable_circuit_breaker,json=enableCircuitBreaker,proto3" json:"enable_circuit_breaker,omitempty"`
	// circuit_breaker_threshold circuit breaker threshold.
	// When the error rate exceeds this threshold, the circuit breaker is triggered.
	CircuitBreakerThreshold float32 `protobuf:"fixed32,15,opt,name=circuit_breaker_threshold,json=circuitBreakerThreshold,proto3" json:"circuit_breaker_threshold,omitempty"`
	// enable_service_watch whether to enable service watching.
	// When enabled, it will monitor service instance changes.
	EnableServiceWatch bool `protobuf:"varint,16,opt,name=enable_service_watch,json=enableServiceWatch,proto3" json:"enable_service_watch,omitempty"`
	// enable_config_watch whether to enable configuration watching.
	// When enabled, it will monitor configuration changes.
	EnableConfigWatch bool `protobuf:"varint,17,opt,name=enable_config_watch,json=enableConfigWatch,proto3" json:"enable_config_watch,omitempty"`
	// load_balancer_type load balancer type.
	// Supported: weighted_random, ring_hash, maglev, l5cst
	LoadBalancerType string `protobuf:"bytes,18,opt,name=load_balancer_type,json=loadBalancerType,proto3" json:"load_balancer_type,omitempty"`
	// enable_route_rule whether to enable routing rules.
	// When enabled, dynamic routing rules will be applied.
	EnableRouteRule bool `protobuf:"varint,19,opt,name=enable_route_rule,json=enableRouteRule,proto3" json:"enable_route_rule,omitempty"`
	// enable_rate_limit whether to enable rate limiting.
	// When enabled, rate limiting policies will be applied.
	EnableRateLimit bool `protobuf:"varint,20,opt,name=enable_rate_limit,json=enableRateLimit,proto3" json:"enable_rate_limit,omitempty"`
	// rate_limit_type rate limiting type.
	// Supported: local, global
	RateLimitType string `protobuf:"bytes,21,opt,name=rate_limit_type,json=rateLimitType,proto3" json:"rate_limit_type,omitempty"`
	// enable_graceful_shutdown whether to enable graceful shutdown.
	// When enabled, it will gracefully deregister services during shutdown.
	EnableGracefulShutdown bool `protobuf:"varint,22,opt,name=enable_graceful_shutdown,json=enableGracefulShutdown,proto3" json:"enable_graceful_shutdown,omitempty"`
	// shutdown_timeout graceful shutdown timeout.
	ShutdownTimeout *durationpb.Duration `protobuf:"bytes,23,opt,name=shutdown_timeout,json=shutdownTimeout,proto3" json:"shutdown_timeout,omitempty"`
	// enable_logging whether to enable detailed logging.
	// When enabled, it will output detailed debug logs.
	EnableLogging bool `protobuf:"varint,24,opt,name=enable_logging,json=enableLogging,proto3" json:"enable_logging,omitempty"`
	// log_level log level.
	// Supported levels: debug, info, warn, error
	LogLevel      string `protobuf:"bytes,25,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Polaris) Reset() {
	*x = Polaris{}
	mi := &file_polaris_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Polaris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polaris) ProtoMessage() {}

func (x *Polaris) ProtoReflect() protoreflect.Message {
	mi := &file_polaris_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polaris.ProtoReflect.Descriptor instead.
func (*Polaris) Descriptor() ([]byte, []int) {
	return file_polaris_proto_rawDescGZIP(), []int{0}
}

func (x *Polaris) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Polaris) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Polaris) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Polaris) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *Polaris) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Polaris) GetConfigPath() string {
	if x != nil {
		return x.ConfigPath
	}
	return ""
}

func (x *Polaris) GetEnableHealthCheck() bool {
	if x != nil {
		return x.EnableHealthCheck
	}
	return false
}

func (x *Polaris) GetHealthCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.HealthCheckInterval
	}
	return nil
}

func (x *Polaris) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

func (x *Polaris) GetEnableRetry() bool {
	if x != nil {
		return x.EnableRetry
	}
	return false
}

func (x *Polaris) GetMaxRetryTimes() int32 {
	if x != nil {
		return x.MaxRetryTimes
	}
	return 0
}

func (x *Polaris) GetRetryInterval() *durationpb.Duration {
	if x != nil {
		return x.RetryInterval
	}
	return nil
}

func (x *Polaris) GetEnableCircuitBreaker() bool {
	if x != nil {
		return x.EnableCircuitBreaker
	}
	return false
}

func (x *Polaris) GetCircuitBreakerThreshold() float32 {
	if x != nil {
		return x.CircuitBreakerThreshold
	}
	return 0
}

func (x *Polaris) GetEnableServiceWatch() bool {
	if x != nil {
		return x.EnableServiceWatch
	}
	return false
}

func (x *Polaris) GetEnableConfigWatch() bool {
	if x != nil {
		return x.EnableConfigWatch
	}
	return false
}

func (x *Polaris) GetLoadBalancerType() string {
	if x != nil {
		return x.LoadBalancerType
	}
	return ""
}

func (x *Polaris) GetEnableRouteRule() bool {
	if x != nil {
		return x.EnableRouteRule
	}
	return false
}

func (x *Polaris) GetEnableRateLimit() bool {
	if x != nil {
		return x.EnableRateLimit
	}
	return false
}

func (x *Polaris) GetRateLimitType() string {
	if x != nil {
		return x.RateLimitType
	}
	return ""
}

func (x *Polaris) GetEnableGracefulShutdown() bool {
	if x != nil {
		return x.EnableGracefulShutdown
	}
	return false
}

func (x *Polaris) GetShutdownTimeout() *durationpb.Duration {
	if x != nil {
		return x.ShutdownTimeout
	}
	return nil
}

func (x *Polaris) GetEnableLogging() bool {
	if x != nil {
		return x.EnableLogging
	}
	return false
}

func (x *Polaris) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

var File_polaris_proto protoreflect.FileDescriptor

const file_polaris_proto_rawDesc = "" +
	"\n" +
	"\rpolaris.proto\x12\x1clynx.protobuf.plugin.polaris\x1a\x1egoogle/protobuf/duration.proto\"\xb6\b\n" +
	"\aPolaris\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x12\x16\n" +
	"\x06weight\x18\x04 \x01(\x05R\x06weight\x12\x10\n" +
	"\x03ttl\x18\x05 \x01(\x05R\x03ttl\x123\n" +
	"\atimeout\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12\x1f\n" +
	"\vconfig_path\x18\a \x01(\tR\n" +
	"configPath\x12.\n" +
	"\x13enable_health_check\x18\b \x01(\bR\x11enableHealthCheck\x12M\n" +
	"\x15health_check_interval\x18\t \x01(\v2\x19.google.protobuf.DurationR\x13healthCheckInterval\x12%\n" +
	"\x0eenable_metrics\x18\n" +
	" \x01(\bR\renableMetrics\x12!\n" +
	"\fenable_retry\x18\v \x01(\bR\venableRetry\x12&\n" +
	"\x0fmax_retry_times\x18\f \x01(\x05R\rmaxRetryTimes\x12@\n" +
	"\x0eretry_interval\x18\r \x01(\v2\x19.google.protobuf.DurationR\rretryInterval\x124\n" +
	"\x16enable_circuit_breaker\x18\x0e \x01(\bR\x14enableCircuitBreaker\x12:\n" +
	"\x19circuit_breaker_threshold\x18\x0f \x01(\x02R\x17circuitBreakerThreshold\x120\n" +
	"\x14enable_service_watch\x18\x10 \x01(\bR\x12enableServiceWatch\x12.\n" +
	"\x13enable_config_watch\x18\x11 \x01(\bR\x11enableConfigWatch\x12,\n" +
	"\x12load_balancer_type\x18\x12 \x01(\tR\x10loadBalancerType\x12*\n" +
	"\x11enable_route_rule\x18\x13 \x01(\bR\x0fenableRouteRule\x12*\n" +
	"\x11enable_rate_limit\x18\x14 \x01(\bR\x0fenableRateLimit\x12&\n" +
	"\x0frate_limit_type\x18\x15 \x01(\tR\rrateLimitType\x128\n" +
	"\x18enable_graceful_shutdown\x18\x16 \x01(\bR\x16enableGracefulShutdown\x12D\n" +
	"\x10shutdown_timeout\x18\x17 \x01(\v2\x19.google.protobuf.DurationR\x0fshutdownTimeout\x12%\n" +
	"\x0eenable_logging\x18\x18 \x01(\bR\renableLogging\x12\x1b\n" +
	"\tlog_level\x18\x19 \x01(\tR\blogLevelB3Z1github.com/go-lynx/lynx/plugins/polaris/conf;confb\x06proto3"

var (
	file_polaris_proto_rawDescOnce sync.Once
	file_polaris_proto_rawDescData []byte
)

func file_polaris_proto_rawDescGZIP() []byte {
	file_polaris_proto_rawDescOnce.Do(func() {
		file_polaris_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_polaris_proto_rawDesc), len(file_polaris_proto_rawDesc)))
	})
	return file_polaris_proto_rawDescData
}

var file_polaris_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_polaris_proto_goTypes = []any{
	(*Polaris)(nil),             // 0: lynx.protobuf.plugin.polaris.Polaris
	(*durationpb.Duration)(nil), // 1: google.protobuf.Duration
}
var file_polaris_proto_depIdxs = []int32{
	1, // 0: lynx.protobuf.plugin.polaris.Polaris.timeout:type_name -> google.protobuf.Duration
	1, // 1: lynx.protobuf.plugin.polaris.Polaris.health_check_interval:type_name -> google.protobuf.Duration
	1, // 2: lynx.protobuf.plugin.polaris.Polaris.retry_interval:type_name -> google.protobuf.Duration
	1, // 3: lynx.protobuf.plugin.polaris.Polaris.shutdown_timeout:type_name -> google.protobuf.Duration
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_polaris_proto_init() }
func file_polaris_proto_init() {
	if File_polaris_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_polaris_proto_rawDesc), len(file_polaris_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_polaris_proto_goTypes,
		DependencyIndexes: file_polaris_proto_depIdxs,
		MessageInfos:      file_polaris_proto_msgTypes,
	}.Build()
	File_polaris_proto = out.File
	file_polaris_proto_goTypes = nil
	file_polaris_proto_depIdxs = nil
}
