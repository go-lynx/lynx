// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: rabbitmq.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RabbitMQ message defines the configuration information for RabbitMQ client
type RabbitMQ struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// urls represents the address list of RabbitMQ servers
	Urls []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	// producers multiple producer instance configurations
	Producers []*Producer `protobuf:"bytes,2,rep,name=producers,proto3" json:"producers,omitempty"`
	// consumers multiple consumer instance configurations
	Consumers []*Consumer `protobuf:"bytes,3,rep,name=consumers,proto3" json:"consumers,omitempty"`
	// Common configurations
	// username for authentication
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// password for authentication
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// virtual host
	VirtualHost string `protobuf:"bytes,6,opt,name=virtual_host,json=virtualHost,proto3" json:"virtual_host,omitempty"`
	// Connection timeout
	DialTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`
	// Heartbeat interval
	Heartbeat *durationpb.Duration `protobuf:"bytes,8,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
	// Channel pool size
	ChannelPoolSize int32 `protobuf:"varint,9,opt,name=channel_pool_size,json=channelPoolSize,proto3" json:"channel_pool_size,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RabbitMQ) Reset() {
	*x = RabbitMQ{}
	mi := &file_rabbitmq_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RabbitMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabbitMQ) ProtoMessage() {}

func (x *RabbitMQ) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabbitMQ.ProtoReflect.Descriptor instead.
func (*RabbitMQ) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0}
}

func (x *RabbitMQ) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *RabbitMQ) GetProducers() []*Producer {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *RabbitMQ) GetConsumers() []*Consumer {
	if x != nil {
		return x.Consumers
	}
	return nil
}

func (x *RabbitMQ) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RabbitMQ) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RabbitMQ) GetVirtualHost() string {
	if x != nil {
		return x.VirtualHost
	}
	return ""
}

func (x *RabbitMQ) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *RabbitMQ) GetHeartbeat() *durationpb.Duration {
	if x != nil {
		return x.Heartbeat
	}
	return nil
}

func (x *RabbitMQ) GetChannelPoolSize() int32 {
	if x != nil {
		return x.ChannelPoolSize
	}
	return 0
}

// Producer configuration
type Producer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to enable producer
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Exchange name
	Exchange string `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	// Exchange type: direct, fanout, topic, headers
	ExchangeType string `protobuf:"bytes,3,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type,omitempty"`
	// Routing key
	RoutingKey string `protobuf:"bytes,4,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	// Maximum number of retries
	MaxRetries int32 `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// Retry interval
	RetryBackoff *durationpb.Duration `protobuf:"bytes,6,opt,name=retry_backoff,json=retryBackoff,proto3" json:"retry_backoff,omitempty"`
	// Publish timeout
	PublishTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=publish_timeout,json=publishTimeout,proto3" json:"publish_timeout,omitempty"`
	// Instance name (for differentiation, routing), do not reuse occupied tags
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	// Whether exchange is durable
	ExchangeDurable bool `protobuf:"varint,9,opt,name=exchange_durable,json=exchangeDurable,proto3" json:"exchange_durable,omitempty"`
	// Whether exchange is auto-deleted
	ExchangeAutoDelete bool `protobuf:"varint,10,opt,name=exchange_auto_delete,json=exchangeAutoDelete,proto3" json:"exchange_auto_delete,omitempty"`
	// Whether message is persistent
	MessagePersistent bool `protobuf:"varint,11,opt,name=message_persistent,json=messagePersistent,proto3" json:"message_persistent,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Producer) Reset() {
	*x = Producer{}
	mi := &file_rabbitmq_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Producer) ProtoMessage() {}

func (x *Producer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Producer.ProtoReflect.Descriptor instead.
func (*Producer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1}
}

func (x *Producer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Producer) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Producer) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

func (x *Producer) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *Producer) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *Producer) GetRetryBackoff() *durationpb.Duration {
	if x != nil {
		return x.RetryBackoff
	}
	return nil
}

func (x *Producer) GetPublishTimeout() *durationpb.Duration {
	if x != nil {
		return x.PublishTimeout
	}
	return nil
}

func (x *Producer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Producer) GetExchangeDurable() bool {
	if x != nil {
		return x.ExchangeDurable
	}
	return false
}

func (x *Producer) GetExchangeAutoDelete() bool {
	if x != nil {
		return x.ExchangeAutoDelete
	}
	return false
}

func (x *Producer) GetMessagePersistent() bool {
	if x != nil {
		return x.MessagePersistent
	}
	return false
}

// Consumer configuration
type Consumer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to enable consumer
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Queue name
	Queue string `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	// Exchange name to bind
	Exchange string `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	// Routing key for binding
	RoutingKey string `protobuf:"bytes,4,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	// Consumer tag
	ConsumerTag string `protobuf:"bytes,5,opt,name=consumer_tag,json=consumerTag,proto3" json:"consumer_tag,omitempty"`
	// Maximum processing concurrency
	MaxConcurrency int32 `protobuf:"varint,6,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
	// Prefetch count
	PrefetchCount int32 `protobuf:"varint,7,opt,name=prefetch_count,json=prefetchCount,proto3" json:"prefetch_count,omitempty"`
	// Instance name (for differentiation/routing)
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	// Whether queue is durable
	QueueDurable bool `protobuf:"varint,9,opt,name=queue_durable,json=queueDurable,proto3" json:"queue_durable,omitempty"`
	// Whether queue is auto-deleted
	QueueAutoDelete bool `protobuf:"varint,10,opt,name=queue_auto_delete,json=queueAutoDelete,proto3" json:"queue_auto_delete,omitempty"`
	// Whether queue is exclusive
	QueueExclusive bool `protobuf:"varint,11,opt,name=queue_exclusive,json=queueExclusive,proto3" json:"queue_exclusive,omitempty"`
	// Whether to auto-ack messages
	AutoAck       bool `protobuf:"varint,12,opt,name=auto_ack,json=autoAck,proto3" json:"auto_ack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Consumer) Reset() {
	*x = Consumer{}
	mi := &file_rabbitmq_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Consumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumer) ProtoMessage() {}

func (x *Consumer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumer.ProtoReflect.Descriptor instead.
func (*Consumer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{2}
}

func (x *Consumer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Consumer) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *Consumer) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Consumer) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *Consumer) GetConsumerTag() string {
	if x != nil {
		return x.ConsumerTag
	}
	return ""
}

func (x *Consumer) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

func (x *Consumer) GetPrefetchCount() int32 {
	if x != nil {
		return x.PrefetchCount
	}
	return 0
}

func (x *Consumer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Consumer) GetQueueDurable() bool {
	if x != nil {
		return x.QueueDurable
	}
	return false
}

func (x *Consumer) GetQueueAutoDelete() bool {
	if x != nil {
		return x.QueueAutoDelete
	}
	return false
}

func (x *Consumer) GetQueueExclusive() bool {
	if x != nil {
		return x.QueueExclusive
	}
	return false
}

func (x *Consumer) GetAutoAck() bool {
	if x != nil {
		return x.AutoAck
	}
	return false
}

var File_rabbitmq_proto protoreflect.FileDescriptor

const file_rabbitmq_proto_rawDesc = "" +
	"\n" +
	"\x0erabbitmq.proto\x12\x1dlynx.protobuf.plugin.rabbitmq\x1a\x1egoogle/protobuf/duration.proto\"\xaa\x03\n" +
	"\bRabbitMQ\x12\x12\n" +
	"\x04urls\x18\x01 \x03(\tR\x04urls\x12E\n" +
	"\tproducers\x18\x02 \x03(\v2'.lynx.protobuf.plugin.rabbitmq.ProducerR\tproducers\x12E\n" +
	"\tconsumers\x18\x03 \x03(\v2'.lynx.protobuf.plugin.rabbitmq.ConsumerR\tconsumers\x12\x1a\n" +
	"\busername\x18\x04 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x12!\n" +
	"\fvirtual_host\x18\x06 \x01(\tR\vvirtualHost\x12<\n" +
	"\fdial_timeout\x18\a \x01(\v2\x19.google.protobuf.DurationR\vdialTimeout\x127\n" +
	"\theartbeat\x18\b \x01(\v2\x19.google.protobuf.DurationR\theartbeat\x12*\n" +
	"\x11channel_pool_size\x18\t \x01(\x05R\x0fchannelPoolSize\"\xcb\x03\n" +
	"\bProducer\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x1a\n" +
	"\bexchange\x18\x02 \x01(\tR\bexchange\x12#\n" +
	"\rexchange_type\x18\x03 \x01(\tR\fexchangeType\x12\x1f\n" +
	"\vrouting_key\x18\x04 \x01(\tR\n" +
	"routingKey\x12\x1f\n" +
	"\vmax_retries\x18\x05 \x01(\x05R\n" +
	"maxRetries\x12>\n" +
	"\rretry_backoff\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\fretryBackoff\x12B\n" +
	"\x0fpublish_timeout\x18\a \x01(\v2\x19.google.protobuf.DurationR\x0epublishTimeout\x12\x12\n" +
	"\x04name\x18\b \x01(\tR\x04name\x12)\n" +
	"\x10exchange_durable\x18\t \x01(\bR\x0fexchangeDurable\x120\n" +
	"\x14exchange_auto_delete\x18\n" +
	" \x01(\bR\x12exchangeAutoDelete\x12-\n" +
	"\x12message_persistent\x18\v \x01(\bR\x11messagePersistent\"\x93\x03\n" +
	"\bConsumer\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x14\n" +
	"\x05queue\x18\x02 \x01(\tR\x05queue\x12\x1a\n" +
	"\bexchange\x18\x03 \x01(\tR\bexchange\x12\x1f\n" +
	"\vrouting_key\x18\x04 \x01(\tR\n" +
	"routingKey\x12!\n" +
	"\fconsumer_tag\x18\x05 \x01(\tR\vconsumerTag\x12'\n" +
	"\x0fmax_concurrency\x18\x06 \x01(\x05R\x0emaxConcurrency\x12%\n" +
	"\x0eprefetch_count\x18\a \x01(\x05R\rprefetchCount\x12\x12\n" +
	"\x04name\x18\b \x01(\tR\x04name\x12#\n" +
	"\rqueue_durable\x18\t \x01(\bR\fqueueDurable\x12*\n" +
	"\x11queue_auto_delete\x18\n" +
	" \x01(\bR\x0fqueueAutoDelete\x12'\n" +
	"\x0fqueue_exclusive\x18\v \x01(\bR\x0equeueExclusive\x12\x19\n" +
	"\bauto_ack\x18\f \x01(\bR\aautoAckB7Z5github.com/go-lynx/lynx/plugins/mq/rabbitmq/conf;confb\x06proto3"

var (
	file_rabbitmq_proto_rawDescOnce sync.Once
	file_rabbitmq_proto_rawDescData []byte
)

func file_rabbitmq_proto_rawDescGZIP() []byte {
	file_rabbitmq_proto_rawDescOnce.Do(func() {
		file_rabbitmq_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rabbitmq_proto_rawDesc), len(file_rabbitmq_proto_rawDesc)))
	})
	return file_rabbitmq_proto_rawDescData
}

var file_rabbitmq_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_rabbitmq_proto_goTypes = []any{
	(*RabbitMQ)(nil),            // 0: lynx.protobuf.plugin.rabbitmq.RabbitMQ
	(*Producer)(nil),            // 1: lynx.protobuf.plugin.rabbitmq.Producer
	(*Consumer)(nil),            // 2: lynx.protobuf.plugin.rabbitmq.Consumer
	(*durationpb.Duration)(nil), // 3: google.protobuf.Duration
}
var file_rabbitmq_proto_depIdxs = []int32{
	1, // 0: lynx.protobuf.plugin.rabbitmq.RabbitMQ.producers:type_name -> lynx.protobuf.plugin.rabbitmq.Producer
	2, // 1: lynx.protobuf.plugin.rabbitmq.RabbitMQ.consumers:type_name -> lynx.protobuf.plugin.rabbitmq.Consumer
	3, // 2: lynx.protobuf.plugin.rabbitmq.RabbitMQ.dial_timeout:type_name -> google.protobuf.Duration
	3, // 3: lynx.protobuf.plugin.rabbitmq.RabbitMQ.heartbeat:type_name -> google.protobuf.Duration
	3, // 4: lynx.protobuf.plugin.rabbitmq.Producer.retry_backoff:type_name -> google.protobuf.Duration
	3, // 5: lynx.protobuf.plugin.rabbitmq.Producer.publish_timeout:type_name -> google.protobuf.Duration
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_rabbitmq_proto_init() }
func file_rabbitmq_proto_init() {
	if File_rabbitmq_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rabbitmq_proto_rawDesc), len(file_rabbitmq_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rabbitmq_proto_goTypes,
		DependencyIndexes: file_rabbitmq_proto_depIdxs,
		MessageInfos:      file_rabbitmq_proto_msgTypes,
	}.Build()
	File_rabbitmq_proto = out.File
	file_rabbitmq_proto_goTypes = nil
	file_rabbitmq_proto_depIdxs = nil
}
