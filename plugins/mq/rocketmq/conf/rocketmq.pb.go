// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: rocketmq.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RocketMQ message defines the configuration information for RocketMQ client
type RocketMQ struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name_server represents the address list of RocketMQ NameServer
	NameServer []string `protobuf:"bytes,1,rep,name=name_server,json=nameServer,proto3" json:"name_server,omitempty"`
	// producers multiple producer instance configurations
	Producers []*Producer `protobuf:"bytes,2,rep,name=producers,proto3" json:"producers,omitempty"`
	// consumers multiple consumer instance configurations
	Consumers []*Consumer `protobuf:"bytes,3,rep,name=consumers,proto3" json:"consumers,omitempty"`
	// Common configurations
	// access_key for authentication
	AccessKey string `protobuf:"bytes,4,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	// secret_key for authentication
	SecretKey string `protobuf:"bytes,5,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// Connection timeout
	DialTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`
	// Request timeout
	RequestTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RocketMQ) Reset() {
	*x = RocketMQ{}
	mi := &file_rocketmq_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RocketMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RocketMQ) ProtoMessage() {}

func (x *RocketMQ) ProtoReflect() protoreflect.Message {
	mi := &file_rocketmq_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RocketMQ.ProtoReflect.Descriptor instead.
func (*RocketMQ) Descriptor() ([]byte, []int) {
	return file_rocketmq_proto_rawDescGZIP(), []int{0}
}

func (x *RocketMQ) GetNameServer() []string {
	if x != nil {
		return x.NameServer
	}
	return nil
}

func (x *RocketMQ) GetProducers() []*Producer {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *RocketMQ) GetConsumers() []*Consumer {
	if x != nil {
		return x.Consumers
	}
	return nil
}

func (x *RocketMQ) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *RocketMQ) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *RocketMQ) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *RocketMQ) GetRequestTimeout() *durationpb.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

// Producer configuration
type Producer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to enable producer
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Producer group name
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Maximum number of retries
	MaxRetries int32 `protobuf:"varint,3,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// Retry interval
	RetryBackoff *durationpb.Duration `protobuf:"bytes,4,opt,name=retry_backoff,json=retryBackoff,proto3" json:"retry_backoff,omitempty"`
	// Send message timeout
	SendTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=send_timeout,json=sendTimeout,proto3" json:"send_timeout,omitempty"`
	// Instance name (for differentiation, routing), do not reuse occupied tags
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Optional: list of allowed topics to send, for routing/permissions
	Topics []string `protobuf:"bytes,7,rep,name=topics,proto3" json:"topics,omitempty"`
	// Whether to enable trace
	EnableTrace   bool `protobuf:"varint,8,opt,name=enable_trace,json=enableTrace,proto3" json:"enable_trace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Producer) Reset() {
	*x = Producer{}
	mi := &file_rocketmq_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Producer) ProtoMessage() {}

func (x *Producer) ProtoReflect() protoreflect.Message {
	mi := &file_rocketmq_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Producer.ProtoReflect.Descriptor instead.
func (*Producer) Descriptor() ([]byte, []int) {
	return file_rocketmq_proto_rawDescGZIP(), []int{1}
}

func (x *Producer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Producer) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Producer) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *Producer) GetRetryBackoff() *durationpb.Duration {
	if x != nil {
		return x.RetryBackoff
	}
	return nil
}

func (x *Producer) GetSendTimeout() *durationpb.Duration {
	if x != nil {
		return x.SendTimeout
	}
	return nil
}

func (x *Producer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Producer) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Producer) GetEnableTrace() bool {
	if x != nil {
		return x.EnableTrace
	}
	return false
}

// Consumer configuration
type Consumer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to enable consumer
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Consumer group name
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Consumption model: CLUSTERING, BROADCASTING
	ConsumeModel string `protobuf:"bytes,3,opt,name=consume_model,json=consumeModel,proto3" json:"consume_model,omitempty"`
	// Message consumption order: CONCURRENTLY, ORDERLY
	ConsumeOrder string `protobuf:"bytes,4,opt,name=consume_order,json=consumeOrder,proto3" json:"consume_order,omitempty"`
	// Maximum processing concurrency
	MaxConcurrency int32 `protobuf:"varint,5,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
	// Pull batch size
	PullBatchSize int32 `protobuf:"varint,6,opt,name=pull_batch_size,json=pullBatchSize,proto3" json:"pull_batch_size,omitempty"`
	// Pull interval
	PullInterval *durationpb.Duration `protobuf:"bytes,7,opt,name=pull_interval,json=pullInterval,proto3" json:"pull_interval,omitempty"`
	// Instance name (for differentiation/routing)
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	// Subscribed topic list
	Topics []string `protobuf:"bytes,9,rep,name=topics,proto3" json:"topics,omitempty"`
	// Whether to enable trace
	EnableTrace   bool `protobuf:"varint,10,opt,name=enable_trace,json=enableTrace,proto3" json:"enable_trace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Consumer) Reset() {
	*x = Consumer{}
	mi := &file_rocketmq_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Consumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumer) ProtoMessage() {}

func (x *Consumer) ProtoReflect() protoreflect.Message {
	mi := &file_rocketmq_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumer.ProtoReflect.Descriptor instead.
func (*Consumer) Descriptor() ([]byte, []int) {
	return file_rocketmq_proto_rawDescGZIP(), []int{2}
}

func (x *Consumer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Consumer) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Consumer) GetConsumeModel() string {
	if x != nil {
		return x.ConsumeModel
	}
	return ""
}

func (x *Consumer) GetConsumeOrder() string {
	if x != nil {
		return x.ConsumeOrder
	}
	return ""
}

func (x *Consumer) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

func (x *Consumer) GetPullBatchSize() int32 {
	if x != nil {
		return x.PullBatchSize
	}
	return 0
}

func (x *Consumer) GetPullInterval() *durationpb.Duration {
	if x != nil {
		return x.PullInterval
	}
	return nil
}

func (x *Consumer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Consumer) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Consumer) GetEnableTrace() bool {
	if x != nil {
		return x.EnableTrace
	}
	return false
}

var File_rocketmq_proto protoreflect.FileDescriptor

const file_rocketmq_proto_rawDesc = "" +
	"\n" +
	"\x0erocketmq.proto\x12\x1dlynx.protobuf.plugin.rocketmq\x1a\x1egoogle/protobuf/duration.proto\"\xf9\x02\n" +
	"\bRocketMQ\x12\x1f\n" +
	"\vname_server\x18\x01 \x03(\tR\n" +
	"nameServer\x12E\n" +
	"\tproducers\x18\x02 \x03(\v2'.lynx.protobuf.plugin.rocketmq.ProducerR\tproducers\x12E\n" +
	"\tconsumers\x18\x03 \x03(\v2'.lynx.protobuf.plugin.rocketmq.ConsumerR\tconsumers\x12\x1d\n" +
	"\n" +
	"access_key\x18\x04 \x01(\tR\taccessKey\x12\x1d\n" +
	"\n" +
	"secret_key\x18\x05 \x01(\tR\tsecretKey\x12<\n" +
	"\fdial_timeout\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\vdialTimeout\x12B\n" +
	"\x0frequest_timeout\x18\a \x01(\v2\x19.google.protobuf.DurationR\x0erequestTimeout\"\xb1\x02\n" +
	"\bProducer\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x1d\n" +
	"\n" +
	"group_name\x18\x02 \x01(\tR\tgroupName\x12\x1f\n" +
	"\vmax_retries\x18\x03 \x01(\x05R\n" +
	"maxRetries\x12>\n" +
	"\rretry_backoff\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\fretryBackoff\x12<\n" +
	"\fsend_timeout\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\vsendTimeout\x12\x12\n" +
	"\x04name\x18\x06 \x01(\tR\x04name\x12\x16\n" +
	"\x06topics\x18\a \x03(\tR\x06topics\x12!\n" +
	"\fenable_trace\x18\b \x01(\bR\venableTrace\"\xed\x02\n" +
	"\bConsumer\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x1d\n" +
	"\n" +
	"group_name\x18\x02 \x01(\tR\tgroupName\x12#\n" +
	"\rconsume_model\x18\x03 \x01(\tR\fconsumeModel\x12#\n" +
	"\rconsume_order\x18\x04 \x01(\tR\fconsumeOrder\x12'\n" +
	"\x0fmax_concurrency\x18\x05 \x01(\x05R\x0emaxConcurrency\x12&\n" +
	"\x0fpull_batch_size\x18\x06 \x01(\x05R\rpullBatchSize\x12>\n" +
	"\rpull_interval\x18\a \x01(\v2\x19.google.protobuf.DurationR\fpullInterval\x12\x12\n" +
	"\x04name\x18\b \x01(\tR\x04name\x12\x16\n" +
	"\x06topics\x18\t \x03(\tR\x06topics\x12!\n" +
	"\fenable_trace\x18\n" +
	" \x01(\bR\venableTraceB7Z5github.com/go-lynx/lynx/plugins/mq/rocketmq/conf;confb\x06proto3"

var (
	file_rocketmq_proto_rawDescOnce sync.Once
	file_rocketmq_proto_rawDescData []byte
)

func file_rocketmq_proto_rawDescGZIP() []byte {
	file_rocketmq_proto_rawDescOnce.Do(func() {
		file_rocketmq_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rocketmq_proto_rawDesc), len(file_rocketmq_proto_rawDesc)))
	})
	return file_rocketmq_proto_rawDescData
}

var file_rocketmq_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_rocketmq_proto_goTypes = []any{
	(*RocketMQ)(nil),            // 0: lynx.protobuf.plugin.rocketmq.RocketMQ
	(*Producer)(nil),            // 1: lynx.protobuf.plugin.rocketmq.Producer
	(*Consumer)(nil),            // 2: lynx.protobuf.plugin.rocketmq.Consumer
	(*durationpb.Duration)(nil), // 3: google.protobuf.Duration
}
var file_rocketmq_proto_depIdxs = []int32{
	1, // 0: lynx.protobuf.plugin.rocketmq.RocketMQ.producers:type_name -> lynx.protobuf.plugin.rocketmq.Producer
	2, // 1: lynx.protobuf.plugin.rocketmq.RocketMQ.consumers:type_name -> lynx.protobuf.plugin.rocketmq.Consumer
	3, // 2: lynx.protobuf.plugin.rocketmq.RocketMQ.dial_timeout:type_name -> google.protobuf.Duration
	3, // 3: lynx.protobuf.plugin.rocketmq.RocketMQ.request_timeout:type_name -> google.protobuf.Duration
	3, // 4: lynx.protobuf.plugin.rocketmq.Producer.retry_backoff:type_name -> google.protobuf.Duration
	3, // 5: lynx.protobuf.plugin.rocketmq.Producer.send_timeout:type_name -> google.protobuf.Duration
	3, // 6: lynx.protobuf.plugin.rocketmq.Consumer.pull_interval:type_name -> google.protobuf.Duration
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_rocketmq_proto_init() }
func file_rocketmq_proto_init() {
	if File_rocketmq_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rocketmq_proto_rawDesc), len(file_rocketmq_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rocketmq_proto_goTypes,
		DependencyIndexes: file_rocketmq_proto_depIdxs,
		MessageInfos:      file_rocketmq_proto_msgTypes,
	}.Build()
	File_rocketmq_proto = out.File
	file_rocketmq_proto_goTypes = nil
	file_rocketmq_proto_depIdxs = nil
}
