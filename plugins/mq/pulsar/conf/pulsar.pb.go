// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: pulsar.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Pulsar configuration
type Pulsar struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Service URL for Pulsar cluster
	ServiceUrl string `protobuf:"bytes,1,opt,name=service_url,json=serviceUrl,proto3" json:"service_url,omitempty"`
	// Authentication configuration
	Auth *Auth `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	// TLS configuration
	Tls *TLS `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
	// Connection configuration
	Connection *Connection `protobuf:"bytes,4,opt,name=connection,proto3" json:"connection,omitempty"`
	// Producer configurations
	Producers []*Producer `protobuf:"bytes,5,rep,name=producers,proto3" json:"producers,omitempty"`
	// Consumer configurations
	Consumers []*Consumer `protobuf:"bytes,6,rep,name=consumers,proto3" json:"consumers,omitempty"`
	// Retry configuration
	Retry *Retry `protobuf:"bytes,7,opt,name=retry,proto3" json:"retry,omitempty"`
	// Monitoring configuration
	Monitoring    *Monitoring `protobuf:"bytes,8,opt,name=monitoring,proto3" json:"monitoring,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pulsar) Reset() {
	*x = Pulsar{}
	mi := &file_pulsar_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pulsar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pulsar) ProtoMessage() {}

func (x *Pulsar) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pulsar.ProtoReflect.Descriptor instead.
func (*Pulsar) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{0}
}

func (x *Pulsar) GetServiceUrl() string {
	if x != nil {
		return x.ServiceUrl
	}
	return ""
}

func (x *Pulsar) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Pulsar) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Pulsar) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *Pulsar) GetProducers() []*Producer {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *Pulsar) GetConsumers() []*Consumer {
	if x != nil {
		return x.Consumers
	}
	return nil
}

func (x *Pulsar) GetRetry() *Retry {
	if x != nil {
		return x.Retry
	}
	return nil
}

func (x *Pulsar) GetMonitoring() *Monitoring {
	if x != nil {
		return x.Monitoring
	}
	return nil
}

// Authentication configuration
type Auth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Authentication type (token, oauth2, tls, etc.)
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Token for token-based authentication
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// OAuth2 configuration
	Oauth2 *OAuth2 `protobuf:"bytes,3,opt,name=oauth2,proto3" json:"oauth2,omitempty"`
	// TLS authentication
	TlsAuth       *TLSAuth `protobuf:"bytes,4,opt,name=tls_auth,json=tlsAuth,proto3" json:"tls_auth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Auth) Reset() {
	*x = Auth{}
	mi := &file_pulsar_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{1}
}

func (x *Auth) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Auth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Auth) GetOauth2() *OAuth2 {
	if x != nil {
		return x.Oauth2
	}
	return nil
}

func (x *Auth) GetTlsAuth() *TLSAuth {
	if x != nil {
		return x.TlsAuth
	}
	return nil
}

// OAuth2 authentication configuration
type OAuth2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// OAuth2 issuer URL
	IssuerUrl string `protobuf:"bytes,1,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	// OAuth2 client ID
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// OAuth2 client secret
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// OAuth2 audience
	Audience string `protobuf:"bytes,4,opt,name=audience,proto3" json:"audience,omitempty"`
	// OAuth2 scope
	Scope         string `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OAuth2) Reset() {
	*x = OAuth2{}
	mi := &file_pulsar_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OAuth2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2) ProtoMessage() {}

func (x *OAuth2) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2.ProtoReflect.Descriptor instead.
func (*OAuth2) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{2}
}

func (x *OAuth2) GetIssuerUrl() string {
	if x != nil {
		return x.IssuerUrl
	}
	return ""
}

func (x *OAuth2) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OAuth2) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *OAuth2) GetAudience() string {
	if x != nil {
		return x.Audience
	}
	return ""
}

func (x *OAuth2) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

// TLS authentication configuration
type TLSAuth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Certificate file path
	CertFile string `protobuf:"bytes,1,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	// Private key file path
	KeyFile string `protobuf:"bytes,2,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	// CA certificate file path
	CaFile        string `protobuf:"bytes,3,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSAuth) Reset() {
	*x = TLSAuth{}
	mi := &file_pulsar_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSAuth) ProtoMessage() {}

func (x *TLSAuth) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSAuth.ProtoReflect.Descriptor instead.
func (*TLSAuth) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{3}
}

func (x *TLSAuth) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *TLSAuth) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *TLSAuth) GetCaFile() string {
	if x != nil {
		return x.CaFile
	}
	return ""
}

// TLS configuration
type TLS struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable TLS
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Allow insecure connection
	AllowInsecureConnection bool `protobuf:"varint,2,opt,name=allow_insecure_connection,json=allowInsecureConnection,proto3" json:"allow_insecure_connection,omitempty"`
	// Trust certificate file path
	TrustCertsFile string `protobuf:"bytes,3,opt,name=trust_certs_file,json=trustCertsFile,proto3" json:"trust_certs_file,omitempty"`
	// Verify hostname
	VerifyHostname bool `protobuf:"varint,4,opt,name=verify_hostname,json=verifyHostname,proto3" json:"verify_hostname,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TLS) Reset() {
	*x = TLS{}
	mi := &file_pulsar_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLS) ProtoMessage() {}

func (x *TLS) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLS.ProtoReflect.Descriptor instead.
func (*TLS) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{4}
}

func (x *TLS) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *TLS) GetAllowInsecureConnection() bool {
	if x != nil {
		return x.AllowInsecureConnection
	}
	return false
}

func (x *TLS) GetTrustCertsFile() string {
	if x != nil {
		return x.TrustCertsFile
	}
	return ""
}

func (x *TLS) GetVerifyHostname() bool {
	if x != nil {
		return x.VerifyHostname
	}
	return false
}

// Connection configuration
type Connection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Connection timeout
	ConnectionTimeout *durationpb.Duration `protobuf:"bytes,1,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	// Operation timeout
	OperationTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=operation_timeout,json=operationTimeout,proto3" json:"operation_timeout,omitempty"`
	// Keep alive interval
	KeepAliveInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=keep_alive_interval,json=keepAliveInterval,proto3" json:"keep_alive_interval,omitempty"`
	// Max number of connections per host
	MaxConnectionsPerHost int32 `protobuf:"varint,4,opt,name=max_connections_per_host,json=maxConnectionsPerHost,proto3" json:"max_connections_per_host,omitempty"`
	// Connection max lifetime
	ConnectionMaxLifetime *durationpb.Duration `protobuf:"bytes,5,opt,name=connection_max_lifetime,json=connectionMaxLifetime,proto3" json:"connection_max_lifetime,omitempty"`
	// Enable connection pooling
	EnableConnectionPooling bool `protobuf:"varint,6,opt,name=enable_connection_pooling,json=enableConnectionPooling,proto3" json:"enable_connection_pooling,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Connection) Reset() {
	*x = Connection{}
	mi := &file_pulsar_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{5}
}

func (x *Connection) GetConnectionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectionTimeout
	}
	return nil
}

func (x *Connection) GetOperationTimeout() *durationpb.Duration {
	if x != nil {
		return x.OperationTimeout
	}
	return nil
}

func (x *Connection) GetKeepAliveInterval() *durationpb.Duration {
	if x != nil {
		return x.KeepAliveInterval
	}
	return nil
}

func (x *Connection) GetMaxConnectionsPerHost() int32 {
	if x != nil {
		return x.MaxConnectionsPerHost
	}
	return 0
}

func (x *Connection) GetConnectionMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.ConnectionMaxLifetime
	}
	return nil
}

func (x *Connection) GetEnableConnectionPooling() bool {
	if x != nil {
		return x.EnableConnectionPooling
	}
	return false
}

// Producer configuration
type Producer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Producer name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Enable producer
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Topic name
	Topic string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	// Producer options
	Options       *ProducerOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Producer) Reset() {
	*x = Producer{}
	mi := &file_pulsar_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Producer) ProtoMessage() {}

func (x *Producer) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Producer.ProtoReflect.Descriptor instead.
func (*Producer) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{6}
}

func (x *Producer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Producer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Producer) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Producer) GetOptions() *ProducerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Producer options
type ProducerOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Producer name
	ProducerName string `protobuf:"bytes,1,opt,name=producer_name,json=producerName,proto3" json:"producer_name,omitempty"`
	// Send timeout
	SendTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=send_timeout,json=sendTimeout,proto3" json:"send_timeout,omitempty"`
	// Max pending messages
	MaxPendingMessages int32 `protobuf:"varint,3,opt,name=max_pending_messages,json=maxPendingMessages,proto3" json:"max_pending_messages,omitempty"`
	// Max pending messages across partitions
	MaxPendingMessagesAcrossPartitions int32 `protobuf:"varint,4,opt,name=max_pending_messages_across_partitions,json=maxPendingMessagesAcrossPartitions,proto3" json:"max_pending_messages_across_partitions,omitempty"`
	// Block if queue full
	BlockIfQueueFull bool `protobuf:"varint,5,opt,name=block_if_queue_full,json=blockIfQueueFull,proto3" json:"block_if_queue_full,omitempty"`
	// Batching enabled
	BatchingEnabled bool `protobuf:"varint,6,opt,name=batching_enabled,json=batchingEnabled,proto3" json:"batching_enabled,omitempty"`
	// Batching max publish delay
	BatchingMaxPublishDelay *durationpb.Duration `protobuf:"bytes,7,opt,name=batching_max_publish_delay,json=batchingMaxPublishDelay,proto3" json:"batching_max_publish_delay,omitempty"`
	// Batching max messages
	BatchingMaxMessages int32 `protobuf:"varint,8,opt,name=batching_max_messages,json=batchingMaxMessages,proto3" json:"batching_max_messages,omitempty"`
	// Batching max size
	BatchingMaxSize int32 `protobuf:"varint,9,opt,name=batching_max_size,json=batchingMaxSize,proto3" json:"batching_max_size,omitempty"`
	// Compression type (none, lz4, zlib, zstd, snappy)
	CompressionType string `protobuf:"bytes,10,opt,name=compression_type,json=compressionType,proto3" json:"compression_type,omitempty"`
	// Hashing scheme (java_string_hash, murmur3_32hash, consistent_hashing)
	HashingScheme string `protobuf:"bytes,11,opt,name=hashing_scheme,json=hashingScheme,proto3" json:"hashing_scheme,omitempty"`
	// Message routing mode (round_robin, single_partition, custom_partition)
	MessageRoutingMode string `protobuf:"bytes,12,opt,name=message_routing_mode,json=messageRoutingMode,proto3" json:"message_routing_mode,omitempty"`
	// Enable chunking
	EnableChunking bool `protobuf:"varint,13,opt,name=enable_chunking,json=enableChunking,proto3" json:"enable_chunking,omitempty"`
	// Chunk max size
	ChunkMaxSize  int32 `protobuf:"varint,14,opt,name=chunk_max_size,json=chunkMaxSize,proto3" json:"chunk_max_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProducerOptions) Reset() {
	*x = ProducerOptions{}
	mi := &file_pulsar_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProducerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerOptions) ProtoMessage() {}

func (x *ProducerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerOptions.ProtoReflect.Descriptor instead.
func (*ProducerOptions) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{7}
}

func (x *ProducerOptions) GetProducerName() string {
	if x != nil {
		return x.ProducerName
	}
	return ""
}

func (x *ProducerOptions) GetSendTimeout() *durationpb.Duration {
	if x != nil {
		return x.SendTimeout
	}
	return nil
}

func (x *ProducerOptions) GetMaxPendingMessages() int32 {
	if x != nil {
		return x.MaxPendingMessages
	}
	return 0
}

func (x *ProducerOptions) GetMaxPendingMessagesAcrossPartitions() int32 {
	if x != nil {
		return x.MaxPendingMessagesAcrossPartitions
	}
	return 0
}

func (x *ProducerOptions) GetBlockIfQueueFull() bool {
	if x != nil {
		return x.BlockIfQueueFull
	}
	return false
}

func (x *ProducerOptions) GetBatchingEnabled() bool {
	if x != nil {
		return x.BatchingEnabled
	}
	return false
}

func (x *ProducerOptions) GetBatchingMaxPublishDelay() *durationpb.Duration {
	if x != nil {
		return x.BatchingMaxPublishDelay
	}
	return nil
}

func (x *ProducerOptions) GetBatchingMaxMessages() int32 {
	if x != nil {
		return x.BatchingMaxMessages
	}
	return 0
}

func (x *ProducerOptions) GetBatchingMaxSize() int32 {
	if x != nil {
		return x.BatchingMaxSize
	}
	return 0
}

func (x *ProducerOptions) GetCompressionType() string {
	if x != nil {
		return x.CompressionType
	}
	return ""
}

func (x *ProducerOptions) GetHashingScheme() string {
	if x != nil {
		return x.HashingScheme
	}
	return ""
}

func (x *ProducerOptions) GetMessageRoutingMode() string {
	if x != nil {
		return x.MessageRoutingMode
	}
	return ""
}

func (x *ProducerOptions) GetEnableChunking() bool {
	if x != nil {
		return x.EnableChunking
	}
	return false
}

func (x *ProducerOptions) GetChunkMaxSize() int32 {
	if x != nil {
		return x.ChunkMaxSize
	}
	return 0
}

// Consumer configuration
type Consumer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Consumer name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Enable consumer
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Topic names
	Topics []string `protobuf:"bytes,3,rep,name=topics,proto3" json:"topics,omitempty"`
	// Subscription name
	SubscriptionName string `protobuf:"bytes,4,opt,name=subscription_name,json=subscriptionName,proto3" json:"subscription_name,omitempty"`
	// Consumer options
	Options       *ConsumerOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Consumer) Reset() {
	*x = Consumer{}
	mi := &file_pulsar_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Consumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumer) ProtoMessage() {}

func (x *Consumer) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumer.ProtoReflect.Descriptor instead.
func (*Consumer) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{8}
}

func (x *Consumer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Consumer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Consumer) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Consumer) GetSubscriptionName() string {
	if x != nil {
		return x.SubscriptionName
	}
	return ""
}

func (x *Consumer) GetOptions() *ConsumerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Consumer options
type ConsumerOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Consumer name
	ConsumerName string `protobuf:"bytes,1,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
	// Subscription type (exclusive, shared, failover, key_shared)
	SubscriptionType string `protobuf:"bytes,2,opt,name=subscription_type,json=subscriptionType,proto3" json:"subscription_type,omitempty"`
	// Subscription initial position (latest, earliest)
	SubscriptionInitialPosition string `protobuf:"bytes,3,opt,name=subscription_initial_position,json=subscriptionInitialPosition,proto3" json:"subscription_initial_position,omitempty"`
	// Subscription mode (durable, non_durable)
	SubscriptionMode string `protobuf:"bytes,4,opt,name=subscription_mode,json=subscriptionMode,proto3" json:"subscription_mode,omitempty"`
	// Receiver queue size
	ReceiverQueueSize int32 `protobuf:"varint,5,opt,name=receiver_queue_size,json=receiverQueueSize,proto3" json:"receiver_queue_size,omitempty"`
	// Max total receiver queue size across partitions
	MaxTotalReceiverQueueSizeAcrossPartitions int32 `protobuf:"varint,6,opt,name=max_total_receiver_queue_size_across_partitions,json=maxTotalReceiverQueueSizeAcrossPartitions,proto3" json:"max_total_receiver_queue_size_across_partitions,omitempty"`
	// Consumer name prefix
	ConsumerNamePrefix string `protobuf:"bytes,7,opt,name=consumer_name_prefix,json=consumerNamePrefix,proto3" json:"consumer_name_prefix,omitempty"`
	// Read compacted
	ReadCompacted bool `protobuf:"varint,8,opt,name=read_compacted,json=readCompacted,proto3" json:"read_compacted,omitempty"`
	// Enable retry on message failure
	EnableRetryOnMessageFailure bool `protobuf:"varint,9,opt,name=enable_retry_on_message_failure,json=enableRetryOnMessageFailure,proto3" json:"enable_retry_on_message_failure,omitempty"`
	// Dead letter policy
	DeadLetterPolicy *DeadLetterPolicy `protobuf:"bytes,10,opt,name=dead_letter_policy,json=deadLetterPolicy,proto3" json:"dead_letter_policy,omitempty"`
	// Retry enable
	RetryEnable bool `protobuf:"varint,11,opt,name=retry_enable,json=retryEnable,proto3" json:"retry_enable,omitempty"`
	// Ack timeout
	AckTimeout *durationpb.Duration `protobuf:"bytes,12,opt,name=ack_timeout,json=ackTimeout,proto3" json:"ack_timeout,omitempty"`
	// Negative ack delay
	NegativeAckDelay *durationpb.Duration `protobuf:"bytes,13,opt,name=negative_ack_delay,json=negativeAckDelay,proto3" json:"negative_ack_delay,omitempty"`
	// Priority level
	PriorityLevel int32 `protobuf:"varint,14,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	// Crypto failure action (fail, discard, consume)
	CryptoFailureAction string `protobuf:"bytes,15,opt,name=crypto_failure_action,json=cryptoFailureAction,proto3" json:"crypto_failure_action,omitempty"`
	// Properties
	Properties    map[string]string `protobuf:"bytes,16,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsumerOptions) Reset() {
	*x = ConsumerOptions{}
	mi := &file_pulsar_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerOptions) ProtoMessage() {}

func (x *ConsumerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerOptions.ProtoReflect.Descriptor instead.
func (*ConsumerOptions) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{9}
}

func (x *ConsumerOptions) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

func (x *ConsumerOptions) GetSubscriptionType() string {
	if x != nil {
		return x.SubscriptionType
	}
	return ""
}

func (x *ConsumerOptions) GetSubscriptionInitialPosition() string {
	if x != nil {
		return x.SubscriptionInitialPosition
	}
	return ""
}

func (x *ConsumerOptions) GetSubscriptionMode() string {
	if x != nil {
		return x.SubscriptionMode
	}
	return ""
}

func (x *ConsumerOptions) GetReceiverQueueSize() int32 {
	if x != nil {
		return x.ReceiverQueueSize
	}
	return 0
}

func (x *ConsumerOptions) GetMaxTotalReceiverQueueSizeAcrossPartitions() int32 {
	if x != nil {
		return x.MaxTotalReceiverQueueSizeAcrossPartitions
	}
	return 0
}

func (x *ConsumerOptions) GetConsumerNamePrefix() string {
	if x != nil {
		return x.ConsumerNamePrefix
	}
	return ""
}

func (x *ConsumerOptions) GetReadCompacted() bool {
	if x != nil {
		return x.ReadCompacted
	}
	return false
}

func (x *ConsumerOptions) GetEnableRetryOnMessageFailure() bool {
	if x != nil {
		return x.EnableRetryOnMessageFailure
	}
	return false
}

func (x *ConsumerOptions) GetDeadLetterPolicy() *DeadLetterPolicy {
	if x != nil {
		return x.DeadLetterPolicy
	}
	return nil
}

func (x *ConsumerOptions) GetRetryEnable() bool {
	if x != nil {
		return x.RetryEnable
	}
	return false
}

func (x *ConsumerOptions) GetAckTimeout() *durationpb.Duration {
	if x != nil {
		return x.AckTimeout
	}
	return nil
}

func (x *ConsumerOptions) GetNegativeAckDelay() *durationpb.Duration {
	if x != nil {
		return x.NegativeAckDelay
	}
	return nil
}

func (x *ConsumerOptions) GetPriorityLevel() int32 {
	if x != nil {
		return x.PriorityLevel
	}
	return 0
}

func (x *ConsumerOptions) GetCryptoFailureAction() string {
	if x != nil {
		return x.CryptoFailureAction
	}
	return ""
}

func (x *ConsumerOptions) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Dead letter policy
type DeadLetterPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Max redeliver count
	MaxRedeliverCount int32 `protobuf:"varint,1,opt,name=max_redeliver_count,json=maxRedeliverCount,proto3" json:"max_redeliver_count,omitempty"`
	// Dead letter topic
	DeadLetterTopic string `protobuf:"bytes,2,opt,name=dead_letter_topic,json=deadLetterTopic,proto3" json:"dead_letter_topic,omitempty"`
	// Initial subscription name
	InitialSubscriptionName string `protobuf:"bytes,3,opt,name=initial_subscription_name,json=initialSubscriptionName,proto3" json:"initial_subscription_name,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DeadLetterPolicy) Reset() {
	*x = DeadLetterPolicy{}
	mi := &file_pulsar_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeadLetterPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeadLetterPolicy) ProtoMessage() {}

func (x *DeadLetterPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeadLetterPolicy.ProtoReflect.Descriptor instead.
func (*DeadLetterPolicy) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{10}
}

func (x *DeadLetterPolicy) GetMaxRedeliverCount() int32 {
	if x != nil {
		return x.MaxRedeliverCount
	}
	return 0
}

func (x *DeadLetterPolicy) GetDeadLetterTopic() string {
	if x != nil {
		return x.DeadLetterTopic
	}
	return ""
}

func (x *DeadLetterPolicy) GetInitialSubscriptionName() string {
	if x != nil {
		return x.InitialSubscriptionName
	}
	return ""
}

// Retry configuration
type Retry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable retry
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Max retry attempts
	MaxAttempts int32 `protobuf:"varint,2,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	// Initial retry delay
	InitialDelay *durationpb.Duration `protobuf:"bytes,3,opt,name=initial_delay,json=initialDelay,proto3" json:"initial_delay,omitempty"`
	// Max retry delay
	MaxDelay *durationpb.Duration `protobuf:"bytes,4,opt,name=max_delay,json=maxDelay,proto3" json:"max_delay,omitempty"`
	// Retry delay multiplier
	RetryDelayMultiplier float32 `protobuf:"fixed32,5,opt,name=retry_delay_multiplier,json=retryDelayMultiplier,proto3" json:"retry_delay_multiplier,omitempty"`
	// Jitter factor
	JitterFactor  float32 `protobuf:"fixed32,6,opt,name=jitter_factor,json=jitterFactor,proto3" json:"jitter_factor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Retry) Reset() {
	*x = Retry{}
	mi := &file_pulsar_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Retry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retry) ProtoMessage() {}

func (x *Retry) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retry.ProtoReflect.Descriptor instead.
func (*Retry) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{11}
}

func (x *Retry) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Retry) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *Retry) GetInitialDelay() *durationpb.Duration {
	if x != nil {
		return x.InitialDelay
	}
	return nil
}

func (x *Retry) GetMaxDelay() *durationpb.Duration {
	if x != nil {
		return x.MaxDelay
	}
	return nil
}

func (x *Retry) GetRetryDelayMultiplier() float32 {
	if x != nil {
		return x.RetryDelayMultiplier
	}
	return 0
}

func (x *Retry) GetJitterFactor() float32 {
	if x != nil {
		return x.JitterFactor
	}
	return 0
}

// Monitoring configuration
type Monitoring struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable metrics
	EnableMetrics bool `protobuf:"varint,1,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics,omitempty"`
	// Metrics namespace
	MetricsNamespace string `protobuf:"bytes,2,opt,name=metrics_namespace,json=metricsNamespace,proto3" json:"metrics_namespace,omitempty"`
	// Enable health check
	EnableHealthCheck bool `protobuf:"varint,3,opt,name=enable_health_check,json=enableHealthCheck,proto3" json:"enable_health_check,omitempty"`
	// Health check interval
	HealthCheckInterval *durationpb.Duration `protobuf:"bytes,4,opt,name=health_check_interval,json=healthCheckInterval,proto3" json:"health_check_interval,omitempty"`
	// Enable tracing
	EnableTracing bool `protobuf:"varint,5,opt,name=enable_tracing,json=enableTracing,proto3" json:"enable_tracing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Monitoring) Reset() {
	*x = Monitoring{}
	mi := &file_pulsar_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Monitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitoring) ProtoMessage() {}

func (x *Monitoring) ProtoReflect() protoreflect.Message {
	mi := &file_pulsar_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitoring.ProtoReflect.Descriptor instead.
func (*Monitoring) Descriptor() ([]byte, []int) {
	return file_pulsar_proto_rawDescGZIP(), []int{12}
}

func (x *Monitoring) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

func (x *Monitoring) GetMetricsNamespace() string {
	if x != nil {
		return x.MetricsNamespace
	}
	return ""
}

func (x *Monitoring) GetEnableHealthCheck() bool {
	if x != nil {
		return x.EnableHealthCheck
	}
	return false
}

func (x *Monitoring) GetHealthCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.HealthCheckInterval
	}
	return nil
}

func (x *Monitoring) GetEnableTracing() bool {
	if x != nil {
		return x.EnableTracing
	}
	return false
}

var File_pulsar_proto protoreflect.FileDescriptor

const file_pulsar_proto_rawDesc = "" +
	"\n" +
	"\fpulsar.proto\x12\x17lynx.protobuf.plugin.mq\x1a\x1egoogle/protobuf/duration.proto\"\xce\x03\n" +
	"\x06Pulsar\x12\x1f\n" +
	"\vservice_url\x18\x01 \x01(\tR\n" +
	"serviceUrl\x121\n" +
	"\x04auth\x18\x02 \x01(\v2\x1d.lynx.protobuf.plugin.mq.AuthR\x04auth\x12.\n" +
	"\x03tls\x18\x03 \x01(\v2\x1c.lynx.protobuf.plugin.mq.TLSR\x03tls\x12C\n" +
	"\n" +
	"connection\x18\x04 \x01(\v2#.lynx.protobuf.plugin.mq.ConnectionR\n" +
	"connection\x12?\n" +
	"\tproducers\x18\x05 \x03(\v2!.lynx.protobuf.plugin.mq.ProducerR\tproducers\x12?\n" +
	"\tconsumers\x18\x06 \x03(\v2!.lynx.protobuf.plugin.mq.ConsumerR\tconsumers\x124\n" +
	"\x05retry\x18\a \x01(\v2\x1e.lynx.protobuf.plugin.mq.RetryR\x05retry\x12C\n" +
	"\n" +
	"monitoring\x18\b \x01(\v2#.lynx.protobuf.plugin.mq.MonitoringR\n" +
	"monitoring\"\xa6\x01\n" +
	"\x04Auth\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x127\n" +
	"\x06oauth2\x18\x03 \x01(\v2\x1f.lynx.protobuf.plugin.mq.OAuth2R\x06oauth2\x12;\n" +
	"\btls_auth\x18\x04 \x01(\v2 .lynx.protobuf.plugin.mq.TLSAuthR\atlsAuth\"\x9b\x01\n" +
	"\x06OAuth2\x12\x1d\n" +
	"\n" +
	"issuer_url\x18\x01 \x01(\tR\tissuerUrl\x12\x1b\n" +
	"\tclient_id\x18\x02 \x01(\tR\bclientId\x12#\n" +
	"\rclient_secret\x18\x03 \x01(\tR\fclientSecret\x12\x1a\n" +
	"\baudience\x18\x04 \x01(\tR\baudience\x12\x14\n" +
	"\x05scope\x18\x05 \x01(\tR\x05scope\"Z\n" +
	"\aTLSAuth\x12\x1b\n" +
	"\tcert_file\x18\x01 \x01(\tR\bcertFile\x12\x19\n" +
	"\bkey_file\x18\x02 \x01(\tR\akeyFile\x12\x17\n" +
	"\aca_file\x18\x03 \x01(\tR\x06caFile\"\xac\x01\n" +
	"\x03TLS\x12\x16\n" +
	"\x06enable\x18\x01 \x01(\bR\x06enable\x12:\n" +
	"\x19allow_insecure_connection\x18\x02 \x01(\bR\x17allowInsecureConnection\x12(\n" +
	"\x10trust_certs_file\x18\x03 \x01(\tR\x0etrustCertsFile\x12'\n" +
	"\x0fverify_hostname\x18\x04 \x01(\bR\x0everifyHostname\"\xb1\x03\n" +
	"\n" +
	"Connection\x12H\n" +
	"\x12connection_timeout\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x11connectionTimeout\x12F\n" +
	"\x11operation_timeout\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x10operationTimeout\x12I\n" +
	"\x13keep_alive_interval\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x11keepAliveInterval\x127\n" +
	"\x18max_connections_per_host\x18\x04 \x01(\x05R\x15maxConnectionsPerHost\x12Q\n" +
	"\x17connection_max_lifetime\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\x15connectionMaxLifetime\x12:\n" +
	"\x19enable_connection_pooling\x18\x06 \x01(\bR\x17enableConnectionPooling\"\x92\x01\n" +
	"\bProducer\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aenabled\x18\x02 \x01(\bR\aenabled\x12\x14\n" +
	"\x05topic\x18\x03 \x01(\tR\x05topic\x12B\n" +
	"\aoptions\x18\x04 \x01(\v2(.lynx.protobuf.plugin.mq.ProducerOptionsR\aoptions\"\xdf\x05\n" +
	"\x0fProducerOptions\x12#\n" +
	"\rproducer_name\x18\x01 \x01(\tR\fproducerName\x12<\n" +
	"\fsend_timeout\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\vsendTimeout\x120\n" +
	"\x14max_pending_messages\x18\x03 \x01(\x05R\x12maxPendingMessages\x12R\n" +
	"&max_pending_messages_across_partitions\x18\x04 \x01(\x05R\"maxPendingMessagesAcrossPartitions\x12-\n" +
	"\x13block_if_queue_full\x18\x05 \x01(\bR\x10blockIfQueueFull\x12)\n" +
	"\x10batching_enabled\x18\x06 \x01(\bR\x0fbatchingEnabled\x12V\n" +
	"\x1abatching_max_publish_delay\x18\a \x01(\v2\x19.google.protobuf.DurationR\x17batchingMaxPublishDelay\x122\n" +
	"\x15batching_max_messages\x18\b \x01(\x05R\x13batchingMaxMessages\x12*\n" +
	"\x11batching_max_size\x18\t \x01(\x05R\x0fbatchingMaxSize\x12)\n" +
	"\x10compression_type\x18\n" +
	" \x01(\tR\x0fcompressionType\x12%\n" +
	"\x0ehashing_scheme\x18\v \x01(\tR\rhashingScheme\x120\n" +
	"\x14message_routing_mode\x18\f \x01(\tR\x12messageRoutingMode\x12'\n" +
	"\x0fenable_chunking\x18\r \x01(\bR\x0eenableChunking\x12$\n" +
	"\x0echunk_max_size\x18\x0e \x01(\x05R\fchunkMaxSize\"\xc1\x01\n" +
	"\bConsumer\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aenabled\x18\x02 \x01(\bR\aenabled\x12\x16\n" +
	"\x06topics\x18\x03 \x03(\tR\x06topics\x12+\n" +
	"\x11subscription_name\x18\x04 \x01(\tR\x10subscriptionName\x12B\n" +
	"\aoptions\x18\x05 \x01(\v2(.lynx.protobuf.plugin.mq.ConsumerOptionsR\aoptions\"\xfc\a\n" +
	"\x0fConsumerOptions\x12#\n" +
	"\rconsumer_name\x18\x01 \x01(\tR\fconsumerName\x12+\n" +
	"\x11subscription_type\x18\x02 \x01(\tR\x10subscriptionType\x12B\n" +
	"\x1dsubscription_initial_position\x18\x03 \x01(\tR\x1bsubscriptionInitialPosition\x12+\n" +
	"\x11subscription_mode\x18\x04 \x01(\tR\x10subscriptionMode\x12.\n" +
	"\x13receiver_queue_size\x18\x05 \x01(\x05R\x11receiverQueueSize\x12b\n" +
	"/max_total_receiver_queue_size_across_partitions\x18\x06 \x01(\x05R)maxTotalReceiverQueueSizeAcrossPartitions\x120\n" +
	"\x14consumer_name_prefix\x18\a \x01(\tR\x12consumerNamePrefix\x12%\n" +
	"\x0eread_compacted\x18\b \x01(\bR\rreadCompacted\x12D\n" +
	"\x1fenable_retry_on_message_failure\x18\t \x01(\bR\x1benableRetryOnMessageFailure\x12W\n" +
	"\x12dead_letter_policy\x18\n" +
	" \x01(\v2).lynx.protobuf.plugin.mq.DeadLetterPolicyR\x10deadLetterPolicy\x12!\n" +
	"\fretry_enable\x18\v \x01(\bR\vretryEnable\x12:\n" +
	"\vack_timeout\x18\f \x01(\v2\x19.google.protobuf.DurationR\n" +
	"ackTimeout\x12G\n" +
	"\x12negative_ack_delay\x18\r \x01(\v2\x19.google.protobuf.DurationR\x10negativeAckDelay\x12%\n" +
	"\x0epriority_level\x18\x0e \x01(\x05R\rpriorityLevel\x122\n" +
	"\x15crypto_failure_action\x18\x0f \x01(\tR\x13cryptoFailureAction\x12X\n" +
	"\n" +
	"properties\x18\x10 \x03(\v28.lynx.protobuf.plugin.mq.ConsumerOptions.PropertiesEntryR\n" +
	"properties\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xaa\x01\n" +
	"\x10DeadLetterPolicy\x12.\n" +
	"\x13max_redeliver_count\x18\x01 \x01(\x05R\x11maxRedeliverCount\x12*\n" +
	"\x11dead_letter_topic\x18\x02 \x01(\tR\x0fdeadLetterTopic\x12:\n" +
	"\x19initial_subscription_name\x18\x03 \x01(\tR\x17initialSubscriptionName\"\x95\x02\n" +
	"\x05Retry\x12\x16\n" +
	"\x06enable\x18\x01 \x01(\bR\x06enable\x12!\n" +
	"\fmax_attempts\x18\x02 \x01(\x05R\vmaxAttempts\x12>\n" +
	"\rinitial_delay\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\finitialDelay\x126\n" +
	"\tmax_delay\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\bmaxDelay\x124\n" +
	"\x16retry_delay_multiplier\x18\x05 \x01(\x02R\x14retryDelayMultiplier\x12#\n" +
	"\rjitter_factor\x18\x06 \x01(\x02R\fjitterFactor\"\x86\x02\n" +
	"\n" +
	"Monitoring\x12%\n" +
	"\x0eenable_metrics\x18\x01 \x01(\bR\renableMetrics\x12+\n" +
	"\x11metrics_namespace\x18\x02 \x01(\tR\x10metricsNamespace\x12.\n" +
	"\x13enable_health_check\x18\x03 \x01(\bR\x11enableHealthCheck\x12M\n" +
	"\x15health_check_interval\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x13healthCheckInterval\x12%\n" +
	"\x0eenable_tracing\x18\x05 \x01(\bR\renableTracingB5Z3github.com/go-lynx/lynx/plugins/mq/pulsar/conf;confb\x06proto3"

var (
	file_pulsar_proto_rawDescOnce sync.Once
	file_pulsar_proto_rawDescData []byte
)

func file_pulsar_proto_rawDescGZIP() []byte {
	file_pulsar_proto_rawDescOnce.Do(func() {
		file_pulsar_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pulsar_proto_rawDesc), len(file_pulsar_proto_rawDesc)))
	})
	return file_pulsar_proto_rawDescData
}

var file_pulsar_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_pulsar_proto_goTypes = []any{
	(*Pulsar)(nil),              // 0: lynx.protobuf.plugin.mq.Pulsar
	(*Auth)(nil),                // 1: lynx.protobuf.plugin.mq.Auth
	(*OAuth2)(nil),              // 2: lynx.protobuf.plugin.mq.OAuth2
	(*TLSAuth)(nil),             // 3: lynx.protobuf.plugin.mq.TLSAuth
	(*TLS)(nil),                 // 4: lynx.protobuf.plugin.mq.TLS
	(*Connection)(nil),          // 5: lynx.protobuf.plugin.mq.Connection
	(*Producer)(nil),            // 6: lynx.protobuf.plugin.mq.Producer
	(*ProducerOptions)(nil),     // 7: lynx.protobuf.plugin.mq.ProducerOptions
	(*Consumer)(nil),            // 8: lynx.protobuf.plugin.mq.Consumer
	(*ConsumerOptions)(nil),     // 9: lynx.protobuf.plugin.mq.ConsumerOptions
	(*DeadLetterPolicy)(nil),    // 10: lynx.protobuf.plugin.mq.DeadLetterPolicy
	(*Retry)(nil),               // 11: lynx.protobuf.plugin.mq.Retry
	(*Monitoring)(nil),          // 12: lynx.protobuf.plugin.mq.Monitoring
	nil,                         // 13: lynx.protobuf.plugin.mq.ConsumerOptions.PropertiesEntry
	(*durationpb.Duration)(nil), // 14: google.protobuf.Duration
}
var file_pulsar_proto_depIdxs = []int32{
	1,  // 0: lynx.protobuf.plugin.mq.Pulsar.auth:type_name -> lynx.protobuf.plugin.mq.Auth
	4,  // 1: lynx.protobuf.plugin.mq.Pulsar.tls:type_name -> lynx.protobuf.plugin.mq.TLS
	5,  // 2: lynx.protobuf.plugin.mq.Pulsar.connection:type_name -> lynx.protobuf.plugin.mq.Connection
	6,  // 3: lynx.protobuf.plugin.mq.Pulsar.producers:type_name -> lynx.protobuf.plugin.mq.Producer
	8,  // 4: lynx.protobuf.plugin.mq.Pulsar.consumers:type_name -> lynx.protobuf.plugin.mq.Consumer
	11, // 5: lynx.protobuf.plugin.mq.Pulsar.retry:type_name -> lynx.protobuf.plugin.mq.Retry
	12, // 6: lynx.protobuf.plugin.mq.Pulsar.monitoring:type_name -> lynx.protobuf.plugin.mq.Monitoring
	2,  // 7: lynx.protobuf.plugin.mq.Auth.oauth2:type_name -> lynx.protobuf.plugin.mq.OAuth2
	3,  // 8: lynx.protobuf.plugin.mq.Auth.tls_auth:type_name -> lynx.protobuf.plugin.mq.TLSAuth
	14, // 9: lynx.protobuf.plugin.mq.Connection.connection_timeout:type_name -> google.protobuf.Duration
	14, // 10: lynx.protobuf.plugin.mq.Connection.operation_timeout:type_name -> google.protobuf.Duration
	14, // 11: lynx.protobuf.plugin.mq.Connection.keep_alive_interval:type_name -> google.protobuf.Duration
	14, // 12: lynx.protobuf.plugin.mq.Connection.connection_max_lifetime:type_name -> google.protobuf.Duration
	7,  // 13: lynx.protobuf.plugin.mq.Producer.options:type_name -> lynx.protobuf.plugin.mq.ProducerOptions
	14, // 14: lynx.protobuf.plugin.mq.ProducerOptions.send_timeout:type_name -> google.protobuf.Duration
	14, // 15: lynx.protobuf.plugin.mq.ProducerOptions.batching_max_publish_delay:type_name -> google.protobuf.Duration
	9,  // 16: lynx.protobuf.plugin.mq.Consumer.options:type_name -> lynx.protobuf.plugin.mq.ConsumerOptions
	10, // 17: lynx.protobuf.plugin.mq.ConsumerOptions.dead_letter_policy:type_name -> lynx.protobuf.plugin.mq.DeadLetterPolicy
	14, // 18: lynx.protobuf.plugin.mq.ConsumerOptions.ack_timeout:type_name -> google.protobuf.Duration
	14, // 19: lynx.protobuf.plugin.mq.ConsumerOptions.negative_ack_delay:type_name -> google.protobuf.Duration
	13, // 20: lynx.protobuf.plugin.mq.ConsumerOptions.properties:type_name -> lynx.protobuf.plugin.mq.ConsumerOptions.PropertiesEntry
	14, // 21: lynx.protobuf.plugin.mq.Retry.initial_delay:type_name -> google.protobuf.Duration
	14, // 22: lynx.protobuf.plugin.mq.Retry.max_delay:type_name -> google.protobuf.Duration
	14, // 23: lynx.protobuf.plugin.mq.Monitoring.health_check_interval:type_name -> google.protobuf.Duration
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_pulsar_proto_init() }
func file_pulsar_proto_init() {
	if File_pulsar_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pulsar_proto_rawDesc), len(file_pulsar_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pulsar_proto_goTypes,
		DependencyIndexes: file_pulsar_proto_depIdxs,
		MessageInfos:      file_pulsar_proto_msgTypes,
	}.Build()
	File_pulsar_proto = out.File
	file_pulsar_proto_goTypes = nil
	file_pulsar_proto_depIdxs = nil
}
