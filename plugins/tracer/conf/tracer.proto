syntax = "proto3";

package lynx.protobuf.plugin.tracer;

option go_package = "github.com/go-lynx/lynx/plugins/tracer/conf;conf";
import "google/protobuf/duration.proto";

// Protocol type (export channel).
// - PROTOCOL_UNSPECIFIED: When unspecified, defaults to OTLP gRPC processing.
// - OTLP_GRPC: Export via OTLP gRPC (typically port 4317).
// - OTLP_HTTP: Export via OTLP HTTP (typically port 4318, path usually /v1/traces).
enum Protocol {
  PROTOCOL_UNSPECIFIED = 0; // Default to OTLP gRPC
  OTLP_GRPC = 1;
  OTLP_HTTP = 2;
}

// Compression method.
// - COMPRESSION_NONE: No compression (default).
// - COMPRESSION_GZIP: Use gzip compression.
enum Compression {
  COMPRESSION_NONE = 0;
  COMPRESSION_GZIP = 1;
}

// Context propagator type, used to pass Trace context across processes/services.
// Common production combinations: W3C_TRACE_CONTEXT + W3C_BAGGAGE; can also use B3/B3_MULTI/Jaeger based on system.
enum Propagator {
  PROPAGATOR_UNSPECIFIED = 0;
  W3C_TRACE_CONTEXT = 1; // tracecontext
  W3C_BAGGAGE = 2;       // baggage
  B3 = 3;
  B3_MULTI = 4;
  JAEGER = 5;
}

// TLS configuration.
// - ca_file: CA root certificate path; used to verify peer certificates; typically required for HTTPS/gRPCs.
// - cert_file/key_file: Client certificate and private key; enables mTLS when configured; empty for one-way TLS.
// - insecure_skip_verify: Whether to skip server certificate verification (for test environment only, not recommended for production).
message TLS {
  string ca_file = 1;
  string cert_file = 2;
  string key_file = 3;
  // Whether to skip certificate verification (for test environment only)
  bool insecure_skip_verify = 4;
}

// Retry configuration (gRPC exporter uses exponential backoff parameters).
// - enabled: Whether to enable retry.
// - max_attempts: Maximum retry attempts (including first attempt); >0 to take effect; recommended 3-10.
// - initial_interval: Initial backoff interval; such as 10ms/100ms.
// - max_interval: Maximum backoff interval upper limit; recommended not to exceed 1m.
message Retry {
  bool enabled = 1;
  int32 max_attempts = 2; // Maximum retry attempts (including first attempt)
  google.protobuf.Duration initial_interval = 3; // Initial backoff
  google.protobuf.Duration max_interval = 4; // Maximum backoff
}

// Batch processing configuration (BatchSpanProcessor). Enabling can significantly reduce export overhead and improve throughput.
// - enabled: Whether to enable batch processing.
// - max_queue_size: Maximum number of spans in queue (>0); recommended 1k-10k.
// - scheduled_delay: Batch scheduling period; smaller delay means lower latency but throughput may also decrease.
// - export_timeout: Single export timeout.
// - max_batch_size: Maximum number of spans per batch (>0, usually not exceeding max_queue_size).
message Batch {
  bool enabled = 1; // Whether to enable batch processing
  int32 max_queue_size = 2; // Maximum number of spans in queue
  google.protobuf.Duration scheduled_delay = 3; // Batch scheduling interval
  google.protobuf.Duration export_timeout = 4; // Single export timeout
  int32 max_batch_size = 5; // Maximum number of spans per batch
}

// Sampler configuration (type + ratio).
// Type description:
// - ALWAYS_ON: Full sampling; developer/debugging friendly, but highest cost.
// - ALWAYS_OFF: No sampling; only context overhead retained.
// - TRACEID_RATIO: Sample root Spans by ratio (ratio 0.0-1.0), child Spans in same Trace follow.
// - PARENT_BASED_TRACEID_RATIO: Parent-based; with parent strictly follows parent decision, without parent samples by ratio.
message Sampler {
  enum Type {
    SAMPLER_UNSPECIFIED = 0; // Equivalent to ALWAYS_ON or using outer ratio
    ALWAYS_ON = 1;
    ALWAYS_OFF = 2;
    TRACEID_RATIO = 3; // Use Tracer.ratio or this message ratio
    PARENT_BASED_TRACEID_RATIO = 4;
  }
  Type type = 1;
  // Sampling rate; value range 0.0-1.0; used when type is TRACEID_RATIO or PARENT_BASED_TRACEID_RATIO.
  // Common in production: 0.1-0.3; 0.0 means no sampling, 1.0 means full sampling.
  float ratio = 2;
}

// Resource information (such as service.name, deployment/team dimension labels).
// - service_name: Service name, equivalent to Resource(service.name); recommended to be consistent with application identifier.
// - attributes: Additional resource attribute key-value pairs (such as deployment.environment=prod).
message Resource {
  string service_name = 1;
  map<string, string> attributes = 2; // Such as deployment.environment=prod
}

// Span limits (SpanLimits).
// Note: Current OpenTelemetry Go SDK SpanLimits mainly supports the following fields:
// - attribute_count_limit, attribute_value_length_limit, event_count_limit, link_count_limit
// Other *_attribute_count_limit fields are ignored in current implementation, only for compatibility/reservation.
message Limits {
  int32 attribute_count_limit = 1;
  int32 attribute_value_length_limit = 2;
  int32 event_count_limit = 3;
  int32 event_attribute_count_limit = 4;
  int32 link_count_limit = 5;
  int32 link_attribute_count_limit = 6;
}

// Combined export and runtime configuration (Exporter/Processor/Sampler/Propagator/Resource/Limits).
// Recommended to use this message for modular configuration; legacy top-level ratio only for fallback.
message Config {
  // Export protocol: OTLP gRPC or OTLP HTTP (default gRPC).
  Protocol protocol = 1;

  // Whether to disable TLS (plaintext transmission). Mutually exclusive with tls: when tls is configured, insecure should be set to false.
  bool insecure = 2;

  // TLS configuration (one-way TLS or mutual mTLS).
  TLS tls = 3;

  // Custom request headers (such as auth Token, tenant info, etc.); will be passed through to Collector.
  map<string, string> headers = 4;

  // Compression method (NONE/GZIP).
  Compression compression = 5;

  // Export timeout (request-level timeout), such as 10s/30s/1m.
  google.protobuf.Duration timeout = 6;

  // Retry configuration (only used by gRPC exporter).
  Retry retry = 7;

  // Batch processing configuration (strongly recommended to enable for improved throughput).
  Batch batch = 8;

  // Sampler configuration (recommended to use PARENT_BASED_TRACEID_RATIO + reasonable ratio).
  Sampler sampler = 9;

  // Context propagator list (recommended to include at least W3C_TRACE_CONTEXT + W3C_BAGGAGE).
  repeated Propagator propagators = 10;

  // Resource information (service.name and additional attributes).
  Resource resource = 11;

  // Span limits (see Limits).
  Limits limits = 12;

  // Only effective in OTLP HTTP mode; default "/v1/traces".
  string http_path = 13;
}

// Tracer defines the configuration information for the tracing plugin.
message Tracer {
  // Whether to enable tracing functionality (true/false). When disabled, TracerProvider will not be initialized.
  bool enable = 1;
  // Export endpoint address; typically OpenTelemetry Collector address, format "host:port".
  // - gRPC commonly uses 4317, for example "otel-collector:4317"
  // - HTTP commonly uses 4318 (requires config.http_path), for example "otel-collector:4318"
  string addr = 2;
  // Modular OpenTelemetry configuration, including protocol/TLS/retry/compression/batch/propagator/resource/limit/sampler.
  Config config = 4;
  // Sampling rate (legacy fallback field): 0.0-1.0.
  // Note: Retained for compatibility with legacy versions. Recommended to use config.sampler (TRACEID_RATIO or PARENT_BASED_TRACEID_RATIO).
  float ratio = 3;
}
