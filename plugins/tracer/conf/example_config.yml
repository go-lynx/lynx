# Lynx Tracer Plugin Configuration Example

# gRPC Exporter Configuration Example
lynx:
  tracer:
    enable: true                # Whether to enable tracing; bool, true/false; default false
    addr: "otel-collector:4317" # Export endpoint address; host:port; gRPC commonly uses 4317 (e.g., otel-collector:4317)
    config:
      protocol: PROTOCOL_OTLP_GRPC   # Export protocol; options: PROTOCOL_OTLP_GRPC / PROTOCOL_OTLP_HTTP
      insecure: true                 # Plaintext transmission; bool, true/false; mutually exclusive with tls (set to false when tls is present)
      compression: COMPRESSION_GZIP  # Compression algorithm; options: COMPRESSION_NONE/COMPRESSION_GZIP (default NONE)
      headers: # Custom request headers; map[string]string, can be used for authentication, etc.
        Authorization: Bearer ${OTEL_TOKEN}
      timeout: 10s                   # Export request timeout; time.Duration format, such as 500ms/10s/1m
      retry: # Retry configuration (only supported by gRPC exporter)
        enabled: true                # Whether to enable retry; bool
        initial_interval: 500ms      # Initial backoff interval; recommended 10ms-5s
        max_interval: 5s             # Maximum backoff interval; recommended not to exceed 1m
      batch: # Batch processing (recommended to enable for improved throughput)
        enabled: true                # Whether to enable batch processing; bool
        max_queue_size: 2048         # Batch processing queue limit; int > 0, recommended 1k-10k
        scheduled_delay: 200ms       # Batch scheduling period; time.Duration, smaller delay means lower latency but lower throughput
        export_timeout: 30s          # Single batch export timeout; time.Duration
        max_batch_size: 512          # Maximum entries per batch; int > 0, recommended <= max_queue_size
      sampler:
        type: SAMPLER_TRACEID_RATIO  # Sampler type; options: ALWAYS_ON/ALWAYS_OFF/SAMPLER_TRACEID_RATIO/PARENT_BASED_TRACEID_RATIO
        ratio: 0.1                   # Sampling rate; 0.0-1.0, commonly 0.1-0.3 in production
      propagators: [ W3C_TRACE_CONTEXT, W3C_BAGGAGE, B3 ] # Context propagators; options: W3C_TRACE_CONTEXT/W3C_BAGGAGE/B3/B3_MULTI/JAEGER
      resource:
        service_name: my-service      # Service name; string; recommended to be consistent with the application
        attributes: # Additional resource attributes; map[string]string
          env: prod                   # Example: environment identifier
          team: core                  # Example: team identifier
      limits:
        attribute_count_limit: 128        # Maximum attributes per span; int > 0
        attribute_value_length_limit: 2048 # Maximum length of single attribute (characters); int > 0
        event_count_limit: 128            # Maximum events per span; int > 0
        link_count_limit: 128             # Maximum links per span; int > 0

# HTTP Export (OTLP/HTTP)
# Note: Collector needs to enable port 4318, and the path is usually /v1/traces
#lynx:
#  tracer:
#    enable: true                 # Whether to enable; bool
#    addr: "otel-collector:4318" # Export endpoint address; HTTP commonly uses 4318
#    config:
#      protocol: PROTOCOL_OTLP_HTTP     # Export protocol; HTTP mode
#      http_path: /v1/traces            # OTLP/HTTP reporting path; default /v1/traces
#      insecure: true                   # Plaintext HTTP; for HTTPS, provide tls and set this to false
#      compression: COMPRESSION_GZIP    # Compression; same as gRPC
#      headers:                         # Custom Header; map[string]string
#        Authorization: Bearer ${OTEL_TOKEN}
#      batch:
#        enabled: true                  # Batch processing; other parameters can be the same as the above example as needed
#      propagators: [B3, W3C_BAGGAGE]   # Propagators; HTTP is also applicable

# gRPC + TLS Mutual Authentication Example
#lynx:
#  tracer:
#    enable: true                 # Enable tracing
#    addr: "otel-collector:4317" # gRPC port
#    config:
#      protocol: PROTOCOL_OTLP_GRPC      # gRPC protocol
#      insecure: false                   # Must be false when using TLS/mTLS
#      tls:
#        ca_file: /etc/otel/ca.pem       # CA root certificate path; used to verify peer certificates
#        cert_file: /etc/otel/client.crt # Client certificate (mTLS); optional, empty for one-way TLS
#        key_file: /etc/otel/client.key  # Client private key (mTLS); paired with cert_file
#        insecure_skip_verify: false     # Whether to skip server certificate verification; not recommended to enable in production
#      batch:
#        enabled: true                   # Recommended to enable batch processing
