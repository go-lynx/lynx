// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: tracer.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Protocol type (export channel).
// - PROTOCOL_UNSPECIFIED: When unspecified, defaults to OTLP gRPC processing.
// - OTLP_GRPC: Export via OTLP gRPC (typically port 4317).
// - OTLP_HTTP: Export via OTLP HTTP (typically port 4318, path usually /v1/traces).
type Protocol int32

const (
	Protocol_PROTOCOL_UNSPECIFIED Protocol = 0 // Default to OTLP gRPC
	Protocol_OTLP_GRPC            Protocol = 1
	Protocol_OTLP_HTTP            Protocol = 2
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "PROTOCOL_UNSPECIFIED",
		1: "OTLP_GRPC",
		2: "OTLP_HTTP",
	}
	Protocol_value = map[string]int32{
		"PROTOCOL_UNSPECIFIED": 0,
		"OTLP_GRPC":            1,
		"OTLP_HTTP":            2,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_tracer_proto_enumTypes[0].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_tracer_proto_enumTypes[0]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{0}
}

// Compression method.
// - COMPRESSION_NONE: No compression (default).
// - COMPRESSION_GZIP: Use gzip compression.
type Compression int32

const (
	Compression_COMPRESSION_NONE Compression = 0
	Compression_COMPRESSION_GZIP Compression = 1
)

// Enum value maps for Compression.
var (
	Compression_name = map[int32]string{
		0: "COMPRESSION_NONE",
		1: "COMPRESSION_GZIP",
	}
	Compression_value = map[string]int32{
		"COMPRESSION_NONE": 0,
		"COMPRESSION_GZIP": 1,
	}
)

func (x Compression) Enum() *Compression {
	p := new(Compression)
	*p = x
	return p
}

func (x Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_tracer_proto_enumTypes[1].Descriptor()
}

func (Compression) Type() protoreflect.EnumType {
	return &file_tracer_proto_enumTypes[1]
}

func (x Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compression.Descriptor instead.
func (Compression) EnumDescriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{1}
}

// Context propagator type, used to pass Trace context across processes/services.
// Common production combinations: W3C_TRACE_CONTEXT + W3C_BAGGAGE; can also use B3/B3_MULTI/Jaeger based on system.
type Propagator int32

const (
	Propagator_PROPAGATOR_UNSPECIFIED Propagator = 0
	Propagator_W3C_TRACE_CONTEXT      Propagator = 1 // tracecontext
	Propagator_W3C_BAGGAGE            Propagator = 2 // baggage
	Propagator_B3                     Propagator = 3
	Propagator_B3_MULTI               Propagator = 4
	Propagator_JAEGER                 Propagator = 5
)

// Enum value maps for Propagator.
var (
	Propagator_name = map[int32]string{
		0: "PROPAGATOR_UNSPECIFIED",
		1: "W3C_TRACE_CONTEXT",
		2: "W3C_BAGGAGE",
		3: "B3",
		4: "B3_MULTI",
		5: "JAEGER",
	}
	Propagator_value = map[string]int32{
		"PROPAGATOR_UNSPECIFIED": 0,
		"W3C_TRACE_CONTEXT":      1,
		"W3C_BAGGAGE":            2,
		"B3":                     3,
		"B3_MULTI":               4,
		"JAEGER":                 5,
	}
)

func (x Propagator) Enum() *Propagator {
	p := new(Propagator)
	*p = x
	return p
}

func (x Propagator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Propagator) Descriptor() protoreflect.EnumDescriptor {
	return file_tracer_proto_enumTypes[2].Descriptor()
}

func (Propagator) Type() protoreflect.EnumType {
	return &file_tracer_proto_enumTypes[2]
}

func (x Propagator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Propagator.Descriptor instead.
func (Propagator) EnumDescriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{2}
}

type Sampler_Type int32

const (
	Sampler_SAMPLER_UNSPECIFIED        Sampler_Type = 0 // Equivalent to ALWAYS_ON or using outer ratio
	Sampler_ALWAYS_ON                  Sampler_Type = 1
	Sampler_ALWAYS_OFF                 Sampler_Type = 2
	Sampler_TRACEID_RATIO              Sampler_Type = 3 // Use Tracer.ratio or this message ratio
	Sampler_PARENT_BASED_TRACEID_RATIO Sampler_Type = 4
)

// Enum value maps for Sampler_Type.
var (
	Sampler_Type_name = map[int32]string{
		0: "SAMPLER_UNSPECIFIED",
		1: "ALWAYS_ON",
		2: "ALWAYS_OFF",
		3: "TRACEID_RATIO",
		4: "PARENT_BASED_TRACEID_RATIO",
	}
	Sampler_Type_value = map[string]int32{
		"SAMPLER_UNSPECIFIED":        0,
		"ALWAYS_ON":                  1,
		"ALWAYS_OFF":                 2,
		"TRACEID_RATIO":              3,
		"PARENT_BASED_TRACEID_RATIO": 4,
	}
)

func (x Sampler_Type) Enum() *Sampler_Type {
	p := new(Sampler_Type)
	*p = x
	return p
}

func (x Sampler_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sampler_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tracer_proto_enumTypes[3].Descriptor()
}

func (Sampler_Type) Type() protoreflect.EnumType {
	return &file_tracer_proto_enumTypes[3]
}

func (x Sampler_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sampler_Type.Descriptor instead.
func (Sampler_Type) EnumDescriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{5, 0}
}

// TLS configuration.
// - ca_file: CA root certificate path; used to verify peer certificates; typically required for HTTPS/gRPCs.
// - cert_file/key_file: Client certificate and private key; enables mTLS when configured; empty for one-way TLS.
// - insecure_skip_verify: Whether to skip server certificate verification (for test environment only, not recommended for production).
type TLS struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	CaFile   string                 `protobuf:"bytes,1,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty"`
	CertFile string                 `protobuf:"bytes,2,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	KeyFile  string                 `protobuf:"bytes,3,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	// Whether to skip certificate verification (for test environment only)
	InsecureSkipVerify bool `protobuf:"varint,4,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TLS) Reset() {
	*x = TLS{}
	mi := &file_tracer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLS) ProtoMessage() {}

func (x *TLS) ProtoReflect() protoreflect.Message {
	mi := &file_tracer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLS.ProtoReflect.Descriptor instead.
func (*TLS) Descriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{0}
}

func (x *TLS) GetCaFile() string {
	if x != nil {
		return x.CaFile
	}
	return ""
}

func (x *TLS) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *TLS) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *TLS) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

// Retry configuration (gRPC exporter uses exponential backoff parameters).
// - enabled: Whether to enable retry.
// - max_attempts: Maximum retry attempts (including first attempt); >0 to take effect; recommended 3-10.
// - initial_interval: Initial backoff interval; such as 10ms/100ms.
// - max_interval: Maximum backoff interval upper limit; recommended not to exceed 1m.
type Retry struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Enabled         bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MaxAttempts     int32                  `protobuf:"varint,2,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`            // Maximum retry attempts (including first attempt)
	InitialInterval *durationpb.Duration   `protobuf:"bytes,3,opt,name=initial_interval,json=initialInterval,proto3" json:"initial_interval,omitempty"` // Initial backoff
	MaxInterval     *durationpb.Duration   `protobuf:"bytes,4,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`             // Maximum backoff
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Retry) Reset() {
	*x = Retry{}
	mi := &file_tracer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Retry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retry) ProtoMessage() {}

func (x *Retry) ProtoReflect() protoreflect.Message {
	mi := &file_tracer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retry.ProtoReflect.Descriptor instead.
func (*Retry) Descriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{1}
}

func (x *Retry) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Retry) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *Retry) GetInitialInterval() *durationpb.Duration {
	if x != nil {
		return x.InitialInterval
	}
	return nil
}

func (x *Retry) GetMaxInterval() *durationpb.Duration {
	if x != nil {
		return x.MaxInterval
	}
	return nil
}

// Connection management configuration for gRPC exporter.
// - max_conn_idle_time: Maximum time a connection can be idle before being closed.
// - max_conn_age: Maximum age of a connection before it is closed.
// - max_conn_age_grace: Additional grace period for connection closure.
// - time: Time to wait for connection establishment.
// - reconnection_period: Minimum time between reconnection attempts.
type Connection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum time a connection can be idle before being closed
	MaxConnIdleTime *durationpb.Duration `protobuf:"bytes,1,opt,name=max_conn_idle_time,json=maxConnIdleTime,proto3" json:"max_conn_idle_time,omitempty"`
	// Maximum age of a connection before it is closed
	MaxConnAge *durationpb.Duration `protobuf:"bytes,2,opt,name=max_conn_age,json=maxConnAge,proto3" json:"max_conn_age,omitempty"`
	// Additional grace period for connection closure
	MaxConnAgeGrace *durationpb.Duration `protobuf:"bytes,3,opt,name=max_conn_age_grace,json=maxConnAgeGrace,proto3" json:"max_conn_age_grace,omitempty"`
	// Time to wait for connection establishment
	ConnectTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	// Minimum time between reconnection attempts
	ReconnectionPeriod *durationpb.Duration `protobuf:"bytes,5,opt,name=reconnection_period,json=reconnectionPeriod,proto3" json:"reconnection_period,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Connection) Reset() {
	*x = Connection{}
	mi := &file_tracer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_tracer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{2}
}

func (x *Connection) GetMaxConnIdleTime() *durationpb.Duration {
	if x != nil {
		return x.MaxConnIdleTime
	}
	return nil
}

func (x *Connection) GetMaxConnAge() *durationpb.Duration {
	if x != nil {
		return x.MaxConnAge
	}
	return nil
}

func (x *Connection) GetMaxConnAgeGrace() *durationpb.Duration {
	if x != nil {
		return x.MaxConnAgeGrace
	}
	return nil
}

func (x *Connection) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *Connection) GetReconnectionPeriod() *durationpb.Duration {
	if x != nil {
		return x.ReconnectionPeriod
	}
	return nil
}

// Load balancing configuration for gRPC exporter.
// - policy: Load balancing policy (pick_first, round_robin, etc.).
// - health_check: Whether to enable health checking for load balancing.
type LoadBalancing struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Load balancing policy
	Policy string `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// Whether to enable health checking
	HealthCheck   bool `protobuf:"varint,2,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadBalancing) Reset() {
	*x = LoadBalancing{}
	mi := &file_tracer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadBalancing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancing) ProtoMessage() {}

func (x *LoadBalancing) ProtoReflect() protoreflect.Message {
	mi := &file_tracer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancing.ProtoReflect.Descriptor instead.
func (*LoadBalancing) Descriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{3}
}

func (x *LoadBalancing) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *LoadBalancing) GetHealthCheck() bool {
	if x != nil {
		return x.HealthCheck
	}
	return false
}

// Batch processing configuration (BatchSpanProcessor). Enabling can significantly reduce export overhead and improve throughput.
// - enabled: Whether to enable batch processing.
// - max_queue_size: Maximum number of spans in queue (>0); recommended 1k-10k.
// - scheduled_delay: Batch scheduling period; smaller delay means lower latency but throughput may also decrease.
// - export_timeout: Single export timeout.
// - max_batch_size: Maximum number of spans per batch (>0, usually not exceeding max_queue_size).
type Batch struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Enabled        bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`                                    // Whether to enable batch processing
	MaxQueueSize   int32                  `protobuf:"varint,2,opt,name=max_queue_size,json=maxQueueSize,proto3" json:"max_queue_size,omitempty"`    // Maximum number of spans in queue
	ScheduledDelay *durationpb.Duration   `protobuf:"bytes,3,opt,name=scheduled_delay,json=scheduledDelay,proto3" json:"scheduled_delay,omitempty"` // Batch scheduling interval
	ExportTimeout  *durationpb.Duration   `protobuf:"bytes,4,opt,name=export_timeout,json=exportTimeout,proto3" json:"export_timeout,omitempty"`    // Single export timeout
	MaxBatchSize   int32                  `protobuf:"varint,5,opt,name=max_batch_size,json=maxBatchSize,proto3" json:"max_batch_size,omitempty"`    // Maximum number of spans per batch
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Batch) Reset() {
	*x = Batch{}
	mi := &file_tracer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_tracer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{4}
}

func (x *Batch) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Batch) GetMaxQueueSize() int32 {
	if x != nil {
		return x.MaxQueueSize
	}
	return 0
}

func (x *Batch) GetScheduledDelay() *durationpb.Duration {
	if x != nil {
		return x.ScheduledDelay
	}
	return nil
}

func (x *Batch) GetExportTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExportTimeout
	}
	return nil
}

func (x *Batch) GetMaxBatchSize() int32 {
	if x != nil {
		return x.MaxBatchSize
	}
	return 0
}

// Sampler configuration (type + ratio).
// Type description:
// - ALWAYS_ON: Full sampling; developer/debugging friendly, but highest cost.
// - ALWAYS_OFF: No sampling; only context overhead retained.
// - TRACEID_RATIO: Sample root Spans by ratio (ratio 0.0-1.0), child Spans in same Trace follow.
// - PARENT_BASED_TRACEID_RATIO: Parent-based; with parent strictly follows parent decision, without parent samples by ratio.
type Sampler struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  Sampler_Type           `protobuf:"varint,1,opt,name=type,proto3,enum=lynx.protobuf.plugin.tracer.Sampler_Type" json:"type,omitempty"`
	// Sampling rate; value range 0.0-1.0; used when type is TRACEID_RATIO or PARENT_BASED_TRACEID_RATIO.
	// Common in production: 0.1-0.3; 0.0 means no sampling, 1.0 means full sampling.
	Ratio         float32 `protobuf:"fixed32,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sampler) Reset() {
	*x = Sampler{}
	mi := &file_tracer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sampler) ProtoMessage() {}

func (x *Sampler) ProtoReflect() protoreflect.Message {
	mi := &file_tracer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sampler.ProtoReflect.Descriptor instead.
func (*Sampler) Descriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{5}
}

func (x *Sampler) GetType() Sampler_Type {
	if x != nil {
		return x.Type
	}
	return Sampler_SAMPLER_UNSPECIFIED
}

func (x *Sampler) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

// Resource information (such as service.name, deployment/team dimension labels).
// - service_name: Service name, equivalent to Resource(service.name); recommended to be consistent with application identifier.
// - attributes: Additional resource attribute key-value pairs (such as deployment.environment=prod).
type Resource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServiceName   string                 `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Attributes    map[string]string      `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Such as deployment.environment=prod
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_tracer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_tracer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{6}
}

func (x *Resource) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Resource) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Span limits (SpanLimits).
// Note: Current OpenTelemetry Go SDK SpanLimits mainly supports the following fields:
// - attribute_count_limit, attribute_value_length_limit, event_count_limit, link_count_limit
// Other *_attribute_count_limit fields are ignored in current implementation, only for compatibility/reservation.
type Limits struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	AttributeCountLimit       int32                  `protobuf:"varint,1,opt,name=attribute_count_limit,json=attributeCountLimit,proto3" json:"attribute_count_limit,omitempty"`
	AttributeValueLengthLimit int32                  `protobuf:"varint,2,opt,name=attribute_value_length_limit,json=attributeValueLengthLimit,proto3" json:"attribute_value_length_limit,omitempty"`
	EventCountLimit           int32                  `protobuf:"varint,3,opt,name=event_count_limit,json=eventCountLimit,proto3" json:"event_count_limit,omitempty"`
	EventAttributeCountLimit  int32                  `protobuf:"varint,4,opt,name=event_attribute_count_limit,json=eventAttributeCountLimit,proto3" json:"event_attribute_count_limit,omitempty"`
	LinkCountLimit            int32                  `protobuf:"varint,5,opt,name=link_count_limit,json=linkCountLimit,proto3" json:"link_count_limit,omitempty"`
	LinkAttributeCountLimit   int32                  `protobuf:"varint,6,opt,name=link_attribute_count_limit,json=linkAttributeCountLimit,proto3" json:"link_attribute_count_limit,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Limits) Reset() {
	*x = Limits{}
	mi := &file_tracer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limits) ProtoMessage() {}

func (x *Limits) ProtoReflect() protoreflect.Message {
	mi := &file_tracer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limits.ProtoReflect.Descriptor instead.
func (*Limits) Descriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{7}
}

func (x *Limits) GetAttributeCountLimit() int32 {
	if x != nil {
		return x.AttributeCountLimit
	}
	return 0
}

func (x *Limits) GetAttributeValueLengthLimit() int32 {
	if x != nil {
		return x.AttributeValueLengthLimit
	}
	return 0
}

func (x *Limits) GetEventCountLimit() int32 {
	if x != nil {
		return x.EventCountLimit
	}
	return 0
}

func (x *Limits) GetEventAttributeCountLimit() int32 {
	if x != nil {
		return x.EventAttributeCountLimit
	}
	return 0
}

func (x *Limits) GetLinkCountLimit() int32 {
	if x != nil {
		return x.LinkCountLimit
	}
	return 0
}

func (x *Limits) GetLinkAttributeCountLimit() int32 {
	if x != nil {
		return x.LinkAttributeCountLimit
	}
	return 0
}

// Combined export and runtime configuration (Exporter/Processor/Sampler/Propagator/Resource/Limits).
// Recommended to use this message for modular configuration; legacy top-level ratio only for fallback.
type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Export protocol: OTLP gRPC or OTLP HTTP (default gRPC).
	Protocol Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=lynx.protobuf.plugin.tracer.Protocol" json:"protocol,omitempty"`
	// Whether to disable TLS (plaintext transmission). Mutually exclusive with tls: when tls is configured, insecure should be set to false.
	Insecure bool `protobuf:"varint,2,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// TLS configuration (one-way TLS or mutual mTLS).
	Tls *TLS `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
	// Custom request headers (such as auth Token, tenant info, etc.); will be passed through to Collector.
	Headers map[string]string `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Compression method (NONE/GZIP).
	Compression Compression `protobuf:"varint,5,opt,name=compression,proto3,enum=lynx.protobuf.plugin.tracer.Compression" json:"compression,omitempty"`
	// Export timeout (request-level timeout), such as 10s/30s/1m.
	Timeout *durationpb.Duration `protobuf:"bytes,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Retry configuration (only used by gRPC exporter).
	Retry *Retry `protobuf:"bytes,7,opt,name=retry,proto3" json:"retry,omitempty"`
	// Connection management configuration (only used by gRPC exporter).
	Connection *Connection `protobuf:"bytes,8,opt,name=connection,proto3" json:"connection,omitempty"`
	// Load balancing configuration (only used by gRPC exporter).
	LoadBalancing *LoadBalancing `protobuf:"bytes,9,opt,name=load_balancing,json=loadBalancing,proto3" json:"load_balancing,omitempty"`
	// Batch processing configuration (strongly recommended to enable for improved throughput).
	Batch *Batch `protobuf:"bytes,10,opt,name=batch,proto3" json:"batch,omitempty"`
	// Sampler configuration (recommended to use PARENT_BASED_TRACEID_RATIO + reasonable ratio).
	Sampler *Sampler `protobuf:"bytes,11,opt,name=sampler,proto3" json:"sampler,omitempty"`
	// Context propagator list (recommended to include at least W3C_TRACE_CONTEXT + W3C_BAGGAGE).
	Propagators []Propagator `protobuf:"varint,12,rep,packed,name=propagators,proto3,enum=lynx.protobuf.plugin.tracer.Propagator" json:"propagators,omitempty"`
	// Resource information (service.name and additional attributes).
	Resource *Resource `protobuf:"bytes,13,opt,name=resource,proto3" json:"resource,omitempty"`
	// Span limits (see Limits).
	Limits *Limits `protobuf:"bytes,14,opt,name=limits,proto3" json:"limits,omitempty"`
	// Only effective in OTLP HTTP mode; default "/v1/traces".
	HttpPath      string `protobuf:"bytes,15,opt,name=http_path,json=httpPath,proto3" json:"http_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_tracer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_tracer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{8}
}

func (x *Config) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_PROTOCOL_UNSPECIFIED
}

func (x *Config) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *Config) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Config) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Config) GetCompression() Compression {
	if x != nil {
		return x.Compression
	}
	return Compression_COMPRESSION_NONE
}

func (x *Config) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Config) GetRetry() *Retry {
	if x != nil {
		return x.Retry
	}
	return nil
}

func (x *Config) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *Config) GetLoadBalancing() *LoadBalancing {
	if x != nil {
		return x.LoadBalancing
	}
	return nil
}

func (x *Config) GetBatch() *Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *Config) GetSampler() *Sampler {
	if x != nil {
		return x.Sampler
	}
	return nil
}

func (x *Config) GetPropagators() []Propagator {
	if x != nil {
		return x.Propagators
	}
	return nil
}

func (x *Config) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Config) GetLimits() *Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *Config) GetHttpPath() string {
	if x != nil {
		return x.HttpPath
	}
	return ""
}

// Tracer defines the configuration information for the tracing plugin.
type Tracer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to enable tracing functionality (true/false). When disabled, TracerProvider will not be initialized.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Export endpoint address; typically OpenTelemetry Collector address, format "host:port".
	// - gRPC commonly uses 4317, for example "otel-collector:4317"
	// - HTTP commonly uses 4318 (requires config.http_path), for example "otel-collector:4318"
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// Modular OpenTelemetry configuration, including protocol/TLS/retry/compression/batch/propagator/resource/limit/sampler.
	Config *Config `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// Sampling rate (legacy fallback field): 0.0-1.0.
	// Note: Retained for compatibility with legacy versions. Recommended to use config.sampler (TRACEID_RATIO or PARENT_BASED_TRACEID_RATIO).
	Ratio         float32 `protobuf:"fixed32,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tracer) Reset() {
	*x = Tracer{}
	mi := &file_tracer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tracer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracer) ProtoMessage() {}

func (x *Tracer) ProtoReflect() protoreflect.Message {
	mi := &file_tracer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracer.ProtoReflect.Descriptor instead.
func (*Tracer) Descriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{9}
}

func (x *Tracer) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Tracer) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Tracer) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Tracer) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

var File_tracer_proto protoreflect.FileDescriptor

const file_tracer_proto_rawDesc = "" +
	"\n" +
	"\ftracer.proto\x12\x1blynx.protobuf.plugin.tracer\x1a\x1egoogle/protobuf/duration.proto\"\x88\x01\n" +
	"\x03TLS\x12\x17\n" +
	"\aca_file\x18\x01 \x01(\tR\x06caFile\x12\x1b\n" +
	"\tcert_file\x18\x02 \x01(\tR\bcertFile\x12\x19\n" +
	"\bkey_file\x18\x03 \x01(\tR\akeyFile\x120\n" +
	"\x14insecure_skip_verify\x18\x04 \x01(\bR\x12insecureSkipVerify\"\xc8\x01\n" +
	"\x05Retry\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12!\n" +
	"\fmax_attempts\x18\x02 \x01(\x05R\vmaxAttempts\x12D\n" +
	"\x10initial_interval\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x0finitialInterval\x12<\n" +
	"\fmax_interval\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\vmaxInterval\"\xe9\x02\n" +
	"\n" +
	"Connection\x12F\n" +
	"\x12max_conn_idle_time\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x0fmaxConnIdleTime\x12;\n" +
	"\fmax_conn_age\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"maxConnAge\x12F\n" +
	"\x12max_conn_age_grace\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x0fmaxConnAgeGrace\x12B\n" +
	"\x0fconnect_timeout\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x0econnectTimeout\x12J\n" +
	"\x13reconnection_period\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\x12reconnectionPeriod\"J\n" +
	"\rLoadBalancing\x12\x16\n" +
	"\x06policy\x18\x01 \x01(\tR\x06policy\x12!\n" +
	"\fhealth_check\x18\x02 \x01(\bR\vhealthCheck\"\xf3\x01\n" +
	"\x05Batch\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12$\n" +
	"\x0emax_queue_size\x18\x02 \x01(\x05R\fmaxQueueSize\x12B\n" +
	"\x0fscheduled_delay\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x0escheduledDelay\x12@\n" +
	"\x0eexport_timeout\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\rexportTimeout\x12$\n" +
	"\x0emax_batch_size\x18\x05 \x01(\x05R\fmaxBatchSize\"\xd1\x01\n" +
	"\aSampler\x12=\n" +
	"\x04type\x18\x01 \x01(\x0e2).lynx.protobuf.plugin.tracer.Sampler.TypeR\x04type\x12\x14\n" +
	"\x05ratio\x18\x02 \x01(\x02R\x05ratio\"q\n" +
	"\x04Type\x12\x17\n" +
	"\x13SAMPLER_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tALWAYS_ON\x10\x01\x12\x0e\n" +
	"\n" +
	"ALWAYS_OFF\x10\x02\x12\x11\n" +
	"\rTRACEID_RATIO\x10\x03\x12\x1e\n" +
	"\x1aPARENT_BASED_TRACEID_RATIO\x10\x04\"\xc3\x01\n" +
	"\bResource\x12!\n" +
	"\fservice_name\x18\x01 \x01(\tR\vserviceName\x12U\n" +
	"\n" +
	"attributes\x18\x02 \x03(\v25.lynx.protobuf.plugin.tracer.Resource.AttributesEntryR\n" +
	"attributes\x1a=\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcf\x02\n" +
	"\x06Limits\x122\n" +
	"\x15attribute_count_limit\x18\x01 \x01(\x05R\x13attributeCountLimit\x12?\n" +
	"\x1cattribute_value_length_limit\x18\x02 \x01(\x05R\x19attributeValueLengthLimit\x12*\n" +
	"\x11event_count_limit\x18\x03 \x01(\x05R\x0feventCountLimit\x12=\n" +
	"\x1bevent_attribute_count_limit\x18\x04 \x01(\x05R\x18eventAttributeCountLimit\x12(\n" +
	"\x10link_count_limit\x18\x05 \x01(\x05R\x0elinkCountLimit\x12;\n" +
	"\x1alink_attribute_count_limit\x18\x06 \x01(\x05R\x17linkAttributeCountLimit\"\xdc\a\n" +
	"\x06Config\x12A\n" +
	"\bprotocol\x18\x01 \x01(\x0e2%.lynx.protobuf.plugin.tracer.ProtocolR\bprotocol\x12\x1a\n" +
	"\binsecure\x18\x02 \x01(\bR\binsecure\x122\n" +
	"\x03tls\x18\x03 \x01(\v2 .lynx.protobuf.plugin.tracer.TLSR\x03tls\x12J\n" +
	"\aheaders\x18\x04 \x03(\v20.lynx.protobuf.plugin.tracer.Config.HeadersEntryR\aheaders\x12J\n" +
	"\vcompression\x18\x05 \x01(\x0e2(.lynx.protobuf.plugin.tracer.CompressionR\vcompression\x123\n" +
	"\atimeout\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x128\n" +
	"\x05retry\x18\a \x01(\v2\".lynx.protobuf.plugin.tracer.RetryR\x05retry\x12G\n" +
	"\n" +
	"connection\x18\b \x01(\v2'.lynx.protobuf.plugin.tracer.ConnectionR\n" +
	"connection\x12Q\n" +
	"\x0eload_balancing\x18\t \x01(\v2*.lynx.protobuf.plugin.tracer.LoadBalancingR\rloadBalancing\x128\n" +
	"\x05batch\x18\n" +
	" \x01(\v2\".lynx.protobuf.plugin.tracer.BatchR\x05batch\x12>\n" +
	"\asampler\x18\v \x01(\v2$.lynx.protobuf.plugin.tracer.SamplerR\asampler\x12I\n" +
	"\vpropagators\x18\f \x03(\x0e2'.lynx.protobuf.plugin.tracer.PropagatorR\vpropagators\x12A\n" +
	"\bresource\x18\r \x01(\v2%.lynx.protobuf.plugin.tracer.ResourceR\bresource\x12;\n" +
	"\x06limits\x18\x0e \x01(\v2#.lynx.protobuf.plugin.tracer.LimitsR\x06limits\x12\x1b\n" +
	"\thttp_path\x18\x0f \x01(\tR\bhttpPath\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x87\x01\n" +
	"\x06Tracer\x12\x16\n" +
	"\x06enable\x18\x01 \x01(\bR\x06enable\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12;\n" +
	"\x06config\x18\x04 \x01(\v2#.lynx.protobuf.plugin.tracer.ConfigR\x06config\x12\x14\n" +
	"\x05ratio\x18\x03 \x01(\x02R\x05ratio*B\n" +
	"\bProtocol\x12\x18\n" +
	"\x14PROTOCOL_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tOTLP_GRPC\x10\x01\x12\r\n" +
	"\tOTLP_HTTP\x10\x02*9\n" +
	"\vCompression\x12\x14\n" +
	"\x10COMPRESSION_NONE\x10\x00\x12\x14\n" +
	"\x10COMPRESSION_GZIP\x10\x01*r\n" +
	"\n" +
	"Propagator\x12\x1a\n" +
	"\x16PROPAGATOR_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11W3C_TRACE_CONTEXT\x10\x01\x12\x0f\n" +
	"\vW3C_BAGGAGE\x10\x02\x12\x06\n" +
	"\x02B3\x10\x03\x12\f\n" +
	"\bB3_MULTI\x10\x04\x12\n" +
	"\n" +
	"\x06JAEGER\x10\x05B2Z0github.com/go-lynx/lynx/plugins/tracer/conf;confb\x06proto3"

var (
	file_tracer_proto_rawDescOnce sync.Once
	file_tracer_proto_rawDescData []byte
)

func file_tracer_proto_rawDescGZIP() []byte {
	file_tracer_proto_rawDescOnce.Do(func() {
		file_tracer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tracer_proto_rawDesc), len(file_tracer_proto_rawDesc)))
	})
	return file_tracer_proto_rawDescData
}

var file_tracer_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_tracer_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_tracer_proto_goTypes = []any{
	(Protocol)(0),               // 0: lynx.protobuf.plugin.tracer.Protocol
	(Compression)(0),            // 1: lynx.protobuf.plugin.tracer.Compression
	(Propagator)(0),             // 2: lynx.protobuf.plugin.tracer.Propagator
	(Sampler_Type)(0),           // 3: lynx.protobuf.plugin.tracer.Sampler.Type
	(*TLS)(nil),                 // 4: lynx.protobuf.plugin.tracer.TLS
	(*Retry)(nil),               // 5: lynx.protobuf.plugin.tracer.Retry
	(*Connection)(nil),          // 6: lynx.protobuf.plugin.tracer.Connection
	(*LoadBalancing)(nil),       // 7: lynx.protobuf.plugin.tracer.LoadBalancing
	(*Batch)(nil),               // 8: lynx.protobuf.plugin.tracer.Batch
	(*Sampler)(nil),             // 9: lynx.protobuf.plugin.tracer.Sampler
	(*Resource)(nil),            // 10: lynx.protobuf.plugin.tracer.Resource
	(*Limits)(nil),              // 11: lynx.protobuf.plugin.tracer.Limits
	(*Config)(nil),              // 12: lynx.protobuf.plugin.tracer.Config
	(*Tracer)(nil),              // 13: lynx.protobuf.plugin.tracer.Tracer
	nil,                         // 14: lynx.protobuf.plugin.tracer.Resource.AttributesEntry
	nil,                         // 15: lynx.protobuf.plugin.tracer.Config.HeadersEntry
	(*durationpb.Duration)(nil), // 16: google.protobuf.Duration
}
var file_tracer_proto_depIdxs = []int32{
	16, // 0: lynx.protobuf.plugin.tracer.Retry.initial_interval:type_name -> google.protobuf.Duration
	16, // 1: lynx.protobuf.plugin.tracer.Retry.max_interval:type_name -> google.protobuf.Duration
	16, // 2: lynx.protobuf.plugin.tracer.Connection.max_conn_idle_time:type_name -> google.protobuf.Duration
	16, // 3: lynx.protobuf.plugin.tracer.Connection.max_conn_age:type_name -> google.protobuf.Duration
	16, // 4: lynx.protobuf.plugin.tracer.Connection.max_conn_age_grace:type_name -> google.protobuf.Duration
	16, // 5: lynx.protobuf.plugin.tracer.Connection.connect_timeout:type_name -> google.protobuf.Duration
	16, // 6: lynx.protobuf.plugin.tracer.Connection.reconnection_period:type_name -> google.protobuf.Duration
	16, // 7: lynx.protobuf.plugin.tracer.Batch.scheduled_delay:type_name -> google.protobuf.Duration
	16, // 8: lynx.protobuf.plugin.tracer.Batch.export_timeout:type_name -> google.protobuf.Duration
	3,  // 9: lynx.protobuf.plugin.tracer.Sampler.type:type_name -> lynx.protobuf.plugin.tracer.Sampler.Type
	14, // 10: lynx.protobuf.plugin.tracer.Resource.attributes:type_name -> lynx.protobuf.plugin.tracer.Resource.AttributesEntry
	0,  // 11: lynx.protobuf.plugin.tracer.Config.protocol:type_name -> lynx.protobuf.plugin.tracer.Protocol
	4,  // 12: lynx.protobuf.plugin.tracer.Config.tls:type_name -> lynx.protobuf.plugin.tracer.TLS
	15, // 13: lynx.protobuf.plugin.tracer.Config.headers:type_name -> lynx.protobuf.plugin.tracer.Config.HeadersEntry
	1,  // 14: lynx.protobuf.plugin.tracer.Config.compression:type_name -> lynx.protobuf.plugin.tracer.Compression
	16, // 15: lynx.protobuf.plugin.tracer.Config.timeout:type_name -> google.protobuf.Duration
	5,  // 16: lynx.protobuf.plugin.tracer.Config.retry:type_name -> lynx.protobuf.plugin.tracer.Retry
	6,  // 17: lynx.protobuf.plugin.tracer.Config.connection:type_name -> lynx.protobuf.plugin.tracer.Connection
	7,  // 18: lynx.protobuf.plugin.tracer.Config.load_balancing:type_name -> lynx.protobuf.plugin.tracer.LoadBalancing
	8,  // 19: lynx.protobuf.plugin.tracer.Config.batch:type_name -> lynx.protobuf.plugin.tracer.Batch
	9,  // 20: lynx.protobuf.plugin.tracer.Config.sampler:type_name -> lynx.protobuf.plugin.tracer.Sampler
	2,  // 21: lynx.protobuf.plugin.tracer.Config.propagators:type_name -> lynx.protobuf.plugin.tracer.Propagator
	10, // 22: lynx.protobuf.plugin.tracer.Config.resource:type_name -> lynx.protobuf.plugin.tracer.Resource
	11, // 23: lynx.protobuf.plugin.tracer.Config.limits:type_name -> lynx.protobuf.plugin.tracer.Limits
	12, // 24: lynx.protobuf.plugin.tracer.Tracer.config:type_name -> lynx.protobuf.plugin.tracer.Config
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_tracer_proto_init() }
func file_tracer_proto_init() {
	if File_tracer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tracer_proto_rawDesc), len(file_tracer_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tracer_proto_goTypes,
		DependencyIndexes: file_tracer_proto_depIdxs,
		EnumInfos:         file_tracer_proto_enumTypes,
		MessageInfos:      file_tracer_proto_msgTypes,
	}.Build()
	File_tracer_proto = out.File
	file_tracer_proto_goTypes = nil
	file_tracer_proto_depIdxs = nil
}
