// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.23.0
// source: tracer.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tracer 定义了链路跟踪插件的配置信息。
type Tracer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// enable 表示是否启用链路跟踪功能,开启则会在日志中打印
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// addr 表示跟踪数据导出的目标端点地址。
	// 通常是 OpenTelemetry Collector 等跟踪数据收集器的地址，格式为 "host:port"。
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// ratio 表示跟踪采样率，取值范围为 0.0 到 1.0。
	// 0.0 表示不采样，1.0 表示对所有请求进行采样，其他值表示按比例采样。
	Ratio         float32 `protobuf:"fixed32,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tracer) Reset() {
	*x = Tracer{}
	mi := &file_tracer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tracer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracer) ProtoMessage() {}

func (x *Tracer) ProtoReflect() protoreflect.Message {
	mi := &file_tracer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracer.ProtoReflect.Descriptor instead.
func (*Tracer) Descriptor() ([]byte, []int) {
	return file_tracer_proto_rawDescGZIP(), []int{0}
}

func (x *Tracer) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Tracer) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Tracer) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

var File_tracer_proto protoreflect.FileDescriptor

const file_tracer_proto_rawDesc = "" +
	"\n" +
	"\ftracer.proto\x12\x1blynx.protobuf.plugin.tracer\"J\n" +
	"\x06Tracer\x12\x16\n" +
	"\x06enable\x18\x01 \x01(\bR\x06enable\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12\x14\n" +
	"\x05ratio\x18\x03 \x01(\x02R\x05ratioB0Z.github.com/go-lynx/plugins/tracer/v2/conf;confb\x06proto3"

var (
	file_tracer_proto_rawDescOnce sync.Once
	file_tracer_proto_rawDescData []byte
)

func file_tracer_proto_rawDescGZIP() []byte {
	file_tracer_proto_rawDescOnce.Do(func() {
		file_tracer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tracer_proto_rawDesc), len(file_tracer_proto_rawDesc)))
	})
	return file_tracer_proto_rawDescData
}

var file_tracer_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tracer_proto_goTypes = []any{
	(*Tracer)(nil), // 0: lynx.protobuf.plugin.tracer.Tracer
}
var file_tracer_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tracer_proto_init() }
func file_tracer_proto_init() {
	if File_tracer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tracer_proto_rawDesc), len(file_tracer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tracer_proto_goTypes,
		DependencyIndexes: file_tracer_proto_depIdxs,
		MessageInfos:      file_tracer_proto_msgTypes,
	}.Build()
	File_tracer_proto = out.File
	file_tracer_proto_goTypes = nil
	file_tracer_proto_depIdxs = nil
}
