// Specify the syntax version used by this Protocol Buffers file

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: plugins/snowflake/conf/snowflake.proto

// Package name used for generated code

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Define Snowflake configuration message type
type Snowflake struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// —— Basic Configuration ——
	// Data center ID (0-31)
	DatacenterId int32 `protobuf:"varint,1,opt,name=datacenter_id,json=datacenterId,proto3" json:"datacenter_id,omitempty"`
	// Worker ID (0-1023), if not set, will auto-register via Redis
	WorkerId int32 `protobuf:"varint,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// Enable auto worker ID registration via Redis
	AutoRegisterWorkerId bool `protobuf:"varint,3,opt,name=auto_register_worker_id,json=autoRegisterWorkerId,proto3" json:"auto_register_worker_id,omitempty"`
	// Redis key prefix for worker ID registration
	RedisKeyPrefix string `protobuf:"bytes,4,opt,name=redis_key_prefix,json=redisKeyPrefix,proto3" json:"redis_key_prefix,omitempty"`
	// Worker ID registration TTL (default: 30s)
	WorkerIdTtl *durationpb.Duration `protobuf:"bytes,5,opt,name=worker_id_ttl,json=workerIdTtl,proto3" json:"worker_id_ttl,omitempty"`
	// Worker ID heartbeat interval (default: 10s)
	HeartbeatInterval *durationpb.Duration `protobuf:"bytes,6,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	// —— Clock Drift Protection ——
	// Enable clock drift protection
	EnableClockDriftProtection bool `protobuf:"varint,7,opt,name=enable_clock_drift_protection,json=enableClockDriftProtection,proto3" json:"enable_clock_drift_protection,omitempty"`
	// Maximum allowed clock drift backward (default: 5s)
	MaxClockDrift *durationpb.Duration `protobuf:"bytes,8,opt,name=max_clock_drift,json=maxClockDrift,proto3" json:"max_clock_drift,omitempty"`
	// Clock drift check interval (default: 1s)
	ClockCheckInterval *durationpb.Duration `protobuf:"bytes,9,opt,name=clock_check_interval,json=clockCheckInterval,proto3" json:"clock_check_interval,omitempty"`
	// Action when clock drift detected: "wait", "error", "ignore"
	ClockDriftAction string `protobuf:"bytes,10,opt,name=clock_drift_action,json=clockDriftAction,proto3" json:"clock_drift_action,omitempty"`
	// —— Performance Configuration ——
	// Enable sequence cache for better performance
	EnableSequenceCache bool `protobuf:"varint,11,opt,name=enable_sequence_cache,json=enableSequenceCache,proto3" json:"enable_sequence_cache,omitempty"`
	// Sequence cache size (default: 1000)
	SequenceCacheSize int32 `protobuf:"varint,12,opt,name=sequence_cache_size,json=sequenceCacheSize,proto3" json:"sequence_cache_size,omitempty"`
	// Enable metrics collection
	EnableMetrics bool `protobuf:"varint,13,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics,omitempty"`
	// —— Redis Integration ——
	// Redis plugin name to use for worker ID registration
	RedisPluginName string `protobuf:"bytes,14,opt,name=redis_plugin_name,json=redisPluginName,proto3" json:"redis_plugin_name,omitempty"`
	// Redis database to use for worker ID registration
	RedisDb int32 `protobuf:"varint,15,opt,name=redis_db,json=redisDb,proto3" json:"redis_db,omitempty"`
	// —— Advanced Configuration ——
	// Custom epoch timestamp (default: 2023-01-01 00:00:00 UTC)
	CustomEpoch int64 `protobuf:"varint,16,opt,name=custom_epoch,json=customEpoch,proto3" json:"custom_epoch,omitempty"`
	// Worker ID bits (default: 10, range: 1-20)
	WorkerIdBits int32 `protobuf:"varint,17,opt,name=worker_id_bits,json=workerIdBits,proto3" json:"worker_id_bits,omitempty"`
	// Sequence bits (default: 12, range: 1-20)
	SequenceBits  int32 `protobuf:"varint,18,opt,name=sequence_bits,json=sequenceBits,proto3" json:"sequence_bits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Snowflake) Reset() {
	*x = Snowflake{}
	mi := &file_plugins_snowflake_conf_snowflake_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Snowflake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snowflake) ProtoMessage() {}

func (x *Snowflake) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_snowflake_conf_snowflake_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snowflake.ProtoReflect.Descriptor instead.
func (*Snowflake) Descriptor() ([]byte, []int) {
	return file_plugins_snowflake_conf_snowflake_proto_rawDescGZIP(), []int{0}
}

func (x *Snowflake) GetDatacenterId() int32 {
	if x != nil {
		return x.DatacenterId
	}
	return 0
}

func (x *Snowflake) GetWorkerId() int32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *Snowflake) GetAutoRegisterWorkerId() bool {
	if x != nil {
		return x.AutoRegisterWorkerId
	}
	return false
}

func (x *Snowflake) GetRedisKeyPrefix() string {
	if x != nil {
		return x.RedisKeyPrefix
	}
	return ""
}

func (x *Snowflake) GetWorkerIdTtl() *durationpb.Duration {
	if x != nil {
		return x.WorkerIdTtl
	}
	return nil
}

func (x *Snowflake) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *Snowflake) GetEnableClockDriftProtection() bool {
	if x != nil {
		return x.EnableClockDriftProtection
	}
	return false
}

func (x *Snowflake) GetMaxClockDrift() *durationpb.Duration {
	if x != nil {
		return x.MaxClockDrift
	}
	return nil
}

func (x *Snowflake) GetClockCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.ClockCheckInterval
	}
	return nil
}

func (x *Snowflake) GetClockDriftAction() string {
	if x != nil {
		return x.ClockDriftAction
	}
	return ""
}

func (x *Snowflake) GetEnableSequenceCache() bool {
	if x != nil {
		return x.EnableSequenceCache
	}
	return false
}

func (x *Snowflake) GetSequenceCacheSize() int32 {
	if x != nil {
		return x.SequenceCacheSize
	}
	return 0
}

func (x *Snowflake) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

func (x *Snowflake) GetRedisPluginName() string {
	if x != nil {
		return x.RedisPluginName
	}
	return ""
}

func (x *Snowflake) GetRedisDb() int32 {
	if x != nil {
		return x.RedisDb
	}
	return 0
}

func (x *Snowflake) GetCustomEpoch() int64 {
	if x != nil {
		return x.CustomEpoch
	}
	return 0
}

func (x *Snowflake) GetWorkerIdBits() int32 {
	if x != nil {
		return x.WorkerIdBits
	}
	return 0
}

func (x *Snowflake) GetSequenceBits() int32 {
	if x != nil {
		return x.SequenceBits
	}
	return 0
}

var File_plugins_snowflake_conf_snowflake_proto protoreflect.FileDescriptor

const file_plugins_snowflake_conf_snowflake_proto_rawDesc = "" +
	"\n" +
	"&plugins/snowflake/conf/snowflake.proto\x12\x1elynx.protobuf.plugin.snowflake\x1a\x1egoogle/protobuf/duration.proto\"\xf8\x06\n" +
	"\tsnowflake\x12#\n" +
	"\rdatacenter_id\x18\x01 \x01(\x05R\fdatacenterId\x12\x1b\n" +
	"\tworker_id\x18\x02 \x01(\x05R\bworkerId\x125\n" +
	"\x17auto_register_worker_id\x18\x03 \x01(\bR\x14autoRegisterWorkerId\x12(\n" +
	"\x10redis_key_prefix\x18\x04 \x01(\tR\x0eredisKeyPrefix\x12=\n" +
	"\rworker_id_ttl\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\vworkerIdTtl\x12H\n" +
	"\x12heartbeat_interval\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\x11heartbeatInterval\x12A\n" +
	"\x1denable_clock_drift_protection\x18\a \x01(\bR\x1aenableClockDriftProtection\x12A\n" +
	"\x0fmax_clock_drift\x18\b \x01(\v2\x19.google.protobuf.DurationR\rmaxClockDrift\x12K\n" +
	"\x14clock_check_interval\x18\t \x01(\v2\x19.google.protobuf.DurationR\x12clockCheckInterval\x12,\n" +
	"\x12clock_drift_action\x18\n" +
	" \x01(\tR\x10clockDriftAction\x122\n" +
	"\x15enable_sequence_cache\x18\v \x01(\bR\x13enableSequenceCache\x12.\n" +
	"\x13sequence_cache_size\x18\f \x01(\x05R\x11sequenceCacheSize\x12%\n" +
	"\x0eenable_metrics\x18\r \x01(\bR\renableMetrics\x12*\n" +
	"\x11redis_plugin_name\x18\x0e \x01(\tR\x0fredisPluginName\x12\x19\n" +
	"\bredis_db\x18\x0f \x01(\x05R\aredisDb\x12!\n" +
	"\fcustom_epoch\x18\x10 \x01(\x03R\vcustomEpoch\x12$\n" +
	"\x0eworker_id_bits\x18\x11 \x01(\x05R\fworkerIdBits\x12#\n" +
	"\rsequence_bits\x18\x12 \x01(\x05R\fsequenceBitsB5Z3github.com/go-lynx/lynx/plugins/snowflake/conf;confb\x06proto3"

var (
	file_plugins_snowflake_conf_snowflake_proto_rawDescOnce sync.Once
	file_plugins_snowflake_conf_snowflake_proto_rawDescData []byte
)

func file_plugins_snowflake_conf_snowflake_proto_rawDescGZIP() []byte {
	file_plugins_snowflake_conf_snowflake_proto_rawDescOnce.Do(func() {
		file_plugins_snowflake_conf_snowflake_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plugins_snowflake_conf_snowflake_proto_rawDesc), len(file_plugins_snowflake_conf_snowflake_proto_rawDesc)))
	})
	return file_plugins_snowflake_conf_snowflake_proto_rawDescData
}

var file_plugins_snowflake_conf_snowflake_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_plugins_snowflake_conf_snowflake_proto_goTypes = []any{
	(*Snowflake)(nil),           // 0: lynx.protobuf.plugin.snowflake.snowflake
	(*durationpb.Duration)(nil), // 1: google.protobuf.Duration
}
var file_plugins_snowflake_conf_snowflake_proto_depIdxs = []int32{
	1, // 0: lynx.protobuf.plugin.snowflake.snowflake.worker_id_ttl:type_name -> google.protobuf.Duration
	1, // 1: lynx.protobuf.plugin.snowflake.snowflake.heartbeat_interval:type_name -> google.protobuf.Duration
	1, // 2: lynx.protobuf.plugin.snowflake.snowflake.max_clock_drift:type_name -> google.protobuf.Duration
	1, // 3: lynx.protobuf.plugin.snowflake.snowflake.clock_check_interval:type_name -> google.protobuf.Duration
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_plugins_snowflake_conf_snowflake_proto_init() }
func file_plugins_snowflake_conf_snowflake_proto_init() {
	if File_plugins_snowflake_conf_snowflake_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plugins_snowflake_conf_snowflake_proto_rawDesc), len(file_plugins_snowflake_conf_snowflake_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugins_snowflake_conf_snowflake_proto_goTypes,
		DependencyIndexes: file_plugins_snowflake_conf_snowflake_proto_depIdxs,
		MessageInfos:      file_plugins_snowflake_conf_snowflake_proto_msgTypes,
	}.Build()
	File_plugins_snowflake_conf_snowflake_proto = out.File
	file_plugins_snowflake_conf_snowflake_proto_goTypes = nil
	file_plugins_snowflake_conf_snowflake_proto_depIdxs = nil
}
