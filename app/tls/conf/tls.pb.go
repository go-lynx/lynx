// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.29.3
// source: tls.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tls message defines TLS related configuration information.
type Tls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// file_name represents the name of the TLS configuration file, used to specify the storage location of the configuration file.
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// group represents the group to which the TLS configuration belongs, which can be used to classify and manage different TLS configurations.
	Group         string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tls) Reset() {
	*x = Tls{}
	mi := &file_tls_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tls) ProtoMessage() {}

func (x *Tls) ProtoReflect() protoreflect.Message {
	mi := &file_tls_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tls.ProtoReflect.Descriptor instead.
func (*Tls) Descriptor() ([]byte, []int) {
	return file_tls_proto_rawDescGZIP(), []int{0}
}

func (x *Tls) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Tls) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

// Cert message defines TLS certificate related information.
type Cert struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// crt represents the path to the X.509 certificate file, usually in PEM format.
	Crt string `protobuf:"bytes,1,opt,name=crt,proto3" json:"crt,omitempty"`
	// key represents the path to the private key file corresponding to the certificate, usually in PEM format.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// rootCA represents the path to the root certificate authority (CA) certificate file, used to verify client or server identity.
	RootCA        string `protobuf:"bytes,3,opt,name=rootCA,proto3" json:"rootCA,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cert) Reset() {
	*x = Cert{}
	mi := &file_tls_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert) ProtoMessage() {}

func (x *Cert) ProtoReflect() protoreflect.Message {
	mi := &file_tls_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cert.ProtoReflect.Descriptor instead.
func (*Cert) Descriptor() ([]byte, []int) {
	return file_tls_proto_rawDescGZIP(), []int{1}
}

func (x *Cert) GetCrt() string {
	if x != nil {
		return x.Crt
	}
	return ""
}

func (x *Cert) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Cert) GetRootCA() string {
	if x != nil {
		return x.RootCA
	}
	return ""
}

var File_tls_proto protoreflect.FileDescriptor

const file_tls_proto_rawDesc = "" +
	"\n" +
	"\ttls.proto\x12\x18lynx.protobuf.plugin.tls\"8\n" +
	"\x03Tls\x12\x1b\n" +
	"\tfile_name\x18\x01 \x01(\tR\bfileName\x12\x14\n" +
	"\x05group\x18\x02 \x01(\tR\x05group\"B\n" +
	"\x04Cert\x12\x10\n" +
	"\x03crt\x18\x01 \x01(\tR\x03crt\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12\x16\n" +
	"\x06rootCA\x18\x03 \x01(\tR\x06rootCAB)Z'github.com/go-lynx/plugin-tls/conf;confb\x06proto3"

var (
	file_tls_proto_rawDescOnce sync.Once
	file_tls_proto_rawDescData []byte
)

func file_tls_proto_rawDescGZIP() []byte {
	file_tls_proto_rawDescOnce.Do(func() {
		file_tls_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tls_proto_rawDesc), len(file_tls_proto_rawDesc)))
	})
	return file_tls_proto_rawDescData
}

var file_tls_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tls_proto_goTypes = []any{
	(*Tls)(nil),  // 0: lynx.protobuf.plugin.tls.Tls
	(*Cert)(nil), // 1: lynx.protobuf.plugin.tls.Cert
}
var file_tls_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tls_proto_init() }
func file_tls_proto_init() {
	if File_tls_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tls_proto_rawDesc), len(file_tls_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tls_proto_goTypes,
		DependencyIndexes: file_tls_proto_depIdxs,
		MessageInfos:      file_tls_proto_msgTypes,
	}.Build()
	File_tls_proto = out.File
	file_tls_proto_goTypes = nil
	file_tls_proto_depIdxs = nil
}
