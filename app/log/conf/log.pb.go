// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.23.0
// source: log.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines a message type for log system configuration.
// 定义一个用于日志系统配置的消息类型。
type Log struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The log level: debug, info, warn, error, etc.
	// 日志级别：debug、info、warn、error 等。
	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	// The file path where logs should be written.
	// 日志输出的文件路径。
	FilePath string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// Whether to also output logs to the console.
	// 是否同时输出日志到控制台。
	ConsoleOutput bool `protobuf:"varint,3,opt,name=console_output,json=consoleOutput,proto3" json:"console_output,omitempty"`
	// The maximum size of a single log file before rotation.
	// 单个日志文件的最大大小，超过该大小将触发轮转。
	MaxSizeMb int32 `protobuf:"varint,4,opt,name=max_size_mb,json=maxSizeMb,proto3" json:"max_size_mb,omitempty"`
	// The maximum number of backup log files to keep.
	// 最多保留的旧日志文件数。
	MaxBackups int32 `protobuf:"varint,5,opt,name=max_backups,json=maxBackups,proto3" json:"max_backups,omitempty"`
	// The maximum number of days to retain old log files.
	// 日志文件最多保留的天数。
	MaxAgeDays int32 `protobuf:"varint,6,opt,name=max_age_days,json=maxAgeDays,proto3" json:"max_age_days,omitempty"`
	// Whether to compress rotated log files.
	// 是否压缩轮转后的日志文件。
	Compress      bool `protobuf:"varint,7,opt,name=compress,proto3" json:"compress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_log_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

func (x *Log) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Log) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *Log) GetConsoleOutput() bool {
	if x != nil {
		return x.ConsoleOutput
	}
	return false
}

func (x *Log) GetMaxSizeMb() int32 {
	if x != nil {
		return x.MaxSizeMb
	}
	return 0
}

func (x *Log) GetMaxBackups() int32 {
	if x != nil {
		return x.MaxBackups
	}
	return 0
}

func (x *Log) GetMaxAgeDays() int32 {
	if x != nil {
		return x.MaxAgeDays
	}
	return 0
}

func (x *Log) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

var File_log_proto protoreflect.FileDescriptor

const file_log_proto_rawDesc = "" +
	"\n" +
	"\tlog.proto\x12\x17lynx.protobuf.plugin.db\"\xde\x01\n" +
	"\x03log\x12\x14\n" +
	"\x05level\x18\x01 \x01(\tR\x05level\x12\x1b\n" +
	"\tfile_path\x18\x02 \x01(\tR\bfilePath\x12%\n" +
	"\x0econsole_output\x18\x03 \x01(\bR\rconsoleOutput\x12\x1e\n" +
	"\vmax_size_mb\x18\x04 \x01(\x05R\tmaxSizeMb\x12\x1f\n" +
	"\vmax_backups\x18\x05 \x01(\x05R\n" +
	"maxBackups\x12 \n" +
	"\fmax_age_days\x18\x06 \x01(\x05R\n" +
	"maxAgeDays\x12\x1a\n" +
	"\bcompress\x18\a \x01(\bR\bcompressB\"Z github.com/go-lynx/lynx/log/confb\x06proto3"

var (
	file_log_proto_rawDescOnce sync.Once
	file_log_proto_rawDescData []byte
)

func file_log_proto_rawDescGZIP() []byte {
	file_log_proto_rawDescOnce.Do(func() {
		file_log_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_log_proto_rawDesc), len(file_log_proto_rawDesc)))
	})
	return file_log_proto_rawDescData
}

var file_log_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_log_proto_goTypes = []any{
	(*Log)(nil), // 0: lynx.protobuf.plugin.db.log
}
var file_log_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_log_proto_init() }
func file_log_proto_init() {
	if File_log_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_log_proto_rawDesc), len(file_log_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_log_proto_goTypes,
		DependencyIndexes: file_log_proto_depIdxs,
		MessageInfos:      file_log_proto_msgTypes,
	}.Build()
	File_log_proto = out.File
	file_log_proto_goTypes = nil
	file_log_proto_depIdxs = nil
}
