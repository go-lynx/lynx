// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: log.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines a message type for log system configuration.
type Log struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The log level: debug, info, warn, error, etc.
	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	// The file path where logs should be written.
	FilePath string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// Whether to also output logs to the console.
	ConsoleOutput bool `protobuf:"varint,3,opt,name=console_output,json=consoleOutput,proto3" json:"console_output,omitempty"`
	// The maximum size of a single log file before rotation.
	MaxSizeMb int32 `protobuf:"varint,4,opt,name=max_size_mb,json=maxSizeMb,proto3" json:"max_size_mb,omitempty"`
	// The maximum number of backup log files to keep.
	MaxBackups int32 `protobuf:"varint,5,opt,name=max_backups,json=maxBackups,proto3" json:"max_backups,omitempty"`
	// The maximum number of days to retain old log files.
	MaxAgeDays int32 `protobuf:"varint,6,opt,name=max_age_days,json=maxAgeDays,proto3" json:"max_age_days,omitempty"`
	// Whether to compress rotated log files.
	Compress bool `protobuf:"varint,7,opt,name=compress,proto3" json:"compress,omitempty"`
	// Stack trace config at top-level log config.
	Stack *Log_Stack `protobuf:"bytes,8,opt,name=stack,proto3" json:"stack,omitempty"`
	// Caller skip depth for caller() extraction.
	CallerSkip int32 `protobuf:"varint,9,opt,name=caller_skip,json=callerSkip,proto3" json:"caller_skip,omitempty"`
	// Timezone name for logging timestamps, e.g. "Asia/Shanghai" or "UTC".
	Timezone string `protobuf:"bytes,10,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Sampling config.
	Sampling      *Log_Sampling `protobuf:"bytes,11,opt,name=sampling,proto3" json:"sampling,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_log_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

func (x *Log) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Log) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *Log) GetConsoleOutput() bool {
	if x != nil {
		return x.ConsoleOutput
	}
	return false
}

func (x *Log) GetMaxSizeMb() int32 {
	if x != nil {
		return x.MaxSizeMb
	}
	return 0
}

func (x *Log) GetMaxBackups() int32 {
	if x != nil {
		return x.MaxBackups
	}
	return 0
}

func (x *Log) GetMaxAgeDays() int32 {
	if x != nil {
		return x.MaxAgeDays
	}
	return 0
}

func (x *Log) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *Log) GetStack() *Log_Stack {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *Log) GetCallerSkip() int32 {
	if x != nil {
		return x.CallerSkip
	}
	return 0
}

func (x *Log) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Log) GetSampling() *Log_Sampling {
	if x != nil {
		return x.Sampling
	}
	return nil
}

// Stack trace capture configuration.
type Log_Stack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to enable stack capture.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Minimum level to capture stack: debug|info|warn|error|fatal
	Level string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	// Number of frames to skip from the top of the stack.
	Skip int32 `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	// Maximum number of frames to capture.
	MaxFrames int32 `protobuf:"varint,4,opt,name=max_frames,json=maxFrames,proto3" json:"max_frames,omitempty"`
	// Frame prefixes to filter out (package/file prefixes).
	FilterPrefixes []string `protobuf:"bytes,5,rep,name=filter_prefixes,json=filterPrefixes,proto3" json:"filter_prefixes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Log_Stack) Reset() {
	*x = Log_Stack{}
	mi := &file_log_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log_Stack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_Stack) ProtoMessage() {}

func (x *Log_Stack) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_Stack.ProtoReflect.Descriptor instead.
func (*Log_Stack) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Log_Stack) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Log_Stack) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Log_Stack) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *Log_Stack) GetMaxFrames() int32 {
	if x != nil {
		return x.MaxFrames
	}
	return 0
}

func (x *Log_Stack) GetFilterPrefixes() []string {
	if x != nil {
		return x.FilterPrefixes
	}
	return nil
}

// Sampling and rate limit configuration.
type Log_Sampling struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable sampling/ratelimiting.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Fraction 0..1 to keep info logs.
	InfoRatio float32 `protobuf:"fixed32,2,opt,name=info_ratio,json=infoRatio,proto3" json:"info_ratio,omitempty"`
	// Fraction 0..1 to keep debug logs.
	DebugRatio float32 `protobuf:"fixed32,3,opt,name=debug_ratio,json=debugRatio,proto3" json:"debug_ratio,omitempty"`
	// Max info logs per second (0 = unlimited).
	MaxInfoPerSec int32 `protobuf:"varint,4,opt,name=max_info_per_sec,json=maxInfoPerSec,proto3" json:"max_info_per_sec,omitempty"`
	// Max debug logs per second (0 = unlimited).
	MaxDebugPerSec int32 `protobuf:"varint,5,opt,name=max_debug_per_sec,json=maxDebugPerSec,proto3" json:"max_debug_per_sec,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Log_Sampling) Reset() {
	*x = Log_Sampling{}
	mi := &file_log_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log_Sampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_Sampling) ProtoMessage() {}

func (x *Log_Sampling) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_Sampling.ProtoReflect.Descriptor instead.
func (*Log_Sampling) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Log_Sampling) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Log_Sampling) GetInfoRatio() float32 {
	if x != nil {
		return x.InfoRatio
	}
	return 0
}

func (x *Log_Sampling) GetDebugRatio() float32 {
	if x != nil {
		return x.DebugRatio
	}
	return 0
}

func (x *Log_Sampling) GetMaxInfoPerSec() int32 {
	if x != nil {
		return x.MaxInfoPerSec
	}
	return 0
}

func (x *Log_Sampling) GetMaxDebugPerSec() int32 {
	if x != nil {
		return x.MaxDebugPerSec
	}
	return 0
}

var File_log_proto protoreflect.FileDescriptor

const file_log_proto_rawDesc = "" +
	"\n" +
	"\tlog.proto\x12\x17lynx.protobuf.plugin.db\"\xe5\x05\n" +
	"\x03log\x12\x14\n" +
	"\x05level\x18\x01 \x01(\tR\x05level\x12\x1b\n" +
	"\tfile_path\x18\x02 \x01(\tR\bfilePath\x12%\n" +
	"\x0econsole_output\x18\x03 \x01(\bR\rconsoleOutput\x12\x1e\n" +
	"\vmax_size_mb\x18\x04 \x01(\x05R\tmaxSizeMb\x12\x1f\n" +
	"\vmax_backups\x18\x05 \x01(\x05R\n" +
	"maxBackups\x12 \n" +
	"\fmax_age_days\x18\x06 \x01(\x05R\n" +
	"maxAgeDays\x12\x1a\n" +
	"\bcompress\x18\a \x01(\bR\bcompress\x128\n" +
	"\x05stack\x18\b \x01(\v2\".lynx.protobuf.plugin.db.log.StackR\x05stack\x12\x1f\n" +
	"\vcaller_skip\x18\t \x01(\x05R\n" +
	"callerSkip\x12\x1a\n" +
	"\btimezone\x18\n" +
	" \x01(\tR\btimezone\x12A\n" +
	"\bsampling\x18\v \x01(\v2%.lynx.protobuf.plugin.db.log.SamplingR\bsampling\x1a\x91\x01\n" +
	"\x05Stack\x12\x16\n" +
	"\x06enable\x18\x01 \x01(\bR\x06enable\x12\x14\n" +
	"\x05level\x18\x02 \x01(\tR\x05level\x12\x12\n" +
	"\x04skip\x18\x03 \x01(\x05R\x04skip\x12\x1d\n" +
	"\n" +
	"max_frames\x18\x04 \x01(\x05R\tmaxFrames\x12'\n" +
	"\x0ffilter_prefixes\x18\x05 \x03(\tR\x0efilterPrefixes\x1a\xb6\x01\n" +
	"\bSampling\x12\x16\n" +
	"\x06enable\x18\x01 \x01(\bR\x06enable\x12\x1d\n" +
	"\n" +
	"info_ratio\x18\x02 \x01(\x02R\tinfoRatio\x12\x1f\n" +
	"\vdebug_ratio\x18\x03 \x01(\x02R\n" +
	"debugRatio\x12'\n" +
	"\x10max_info_per_sec\x18\x04 \x01(\x05R\rmaxInfoPerSec\x12)\n" +
	"\x11max_debug_per_sec\x18\x05 \x01(\x05R\x0emaxDebugPerSecB&Z$github.com/go-lynx/lynx/app/log/confb\x06proto3"

var (
	file_log_proto_rawDescOnce sync.Once
	file_log_proto_rawDescData []byte
)

func file_log_proto_rawDescGZIP() []byte {
	file_log_proto_rawDescOnce.Do(func() {
		file_log_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_log_proto_rawDesc), len(file_log_proto_rawDesc)))
	})
	return file_log_proto_rawDescData
}

var file_log_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_log_proto_goTypes = []any{
	(*Log)(nil),          // 0: lynx.protobuf.plugin.db.log
	(*Log_Stack)(nil),    // 1: lynx.protobuf.plugin.db.log.Stack
	(*Log_Sampling)(nil), // 2: lynx.protobuf.plugin.db.log.Sampling
}
var file_log_proto_depIdxs = []int32{
	1, // 0: lynx.protobuf.plugin.db.log.stack:type_name -> lynx.protobuf.plugin.db.log.Stack
	2, // 1: lynx.protobuf.plugin.db.log.sampling:type_name -> lynx.protobuf.plugin.db.log.Sampling
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_log_proto_init() }
func file_log_proto_init() {
	if File_log_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_log_proto_rawDesc), len(file_log_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_log_proto_goTypes,
		DependencyIndexes: file_log_proto_depIdxs,
		MessageInfos:      file_log_proto_msgTypes,
	}.Build()
	File_log_proto = out.File
	file_log_proto_goTypes = nil
	file_log_proto_depIdxs = nil
}
