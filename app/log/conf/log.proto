syntax = "proto3";

package lynx.protobuf.plugin.db;

option go_package = "github.com/go-lynx/lynx/app/log/conf";

// Defines a message type for log system configuration.
// 定义一个用于日志系统配置的消息类型。
message log {
  // The log level: debug, info, warn, error, etc.
  // 日志级别：debug、info、warn、error 等。
  string level = 1;

  // The file path where logs should be written.
  // 日志输出的文件路径。
  string file_path = 2;

  // Whether to also output logs to the console.
  // 是否同时输出日志到控制台。
  bool console_output = 3;

  // The maximum size of a single log file before rotation.
  // 单个日志文件的最大大小，超过该大小将触发轮转。
  int32 max_size_mb = 4;

  // The maximum number of backup log files to keep.
  // 最多保留的旧日志文件数。
  int32 max_backups = 5;

  // The maximum number of days to retain old log files.
  // 日志文件最多保留的天数。
  int32 max_age_days = 6;

  // Whether to compress rotated log files.
  // 是否压缩轮转后的日志文件。
  bool compress = 7;

  // Stack trace capture configuration.
  // 错误堆栈采集配置。
  message Stack {
    // Whether to enable stack capture.
    // 是否开启堆栈采集。
    bool enable = 1;

    // Minimum level to capture stack: debug|info|warn|error|fatal
    // 采集阈值级别。
    string level = 2;

    // Number of frames to skip from the top of the stack.
    // 跳过的栈帧数量。
    int32 skip = 3;

    // Maximum number of frames to capture.
    // 最多采集的栈帧数。
    int32 max_frames = 4;

    // Frame prefixes to filter out (package/file prefixes).
    // 需要过滤的帧前缀（包名/文件路径前缀）。
    repeated string filter_prefixes = 5;
  }

  // Stack trace config at top-level log config.
  // 顶层日志配置中的堆栈采集配置。
  Stack stack = 8;

  // Caller skip depth for caller() extraction.
  // 日志调用者信息的栈深度偏移量。
  int32 caller_skip = 9;

  // Timezone name for logging timestamps, e.g. "Asia/Shanghai" or "UTC".
  // 日志时间戳的时区名称，例如 "Asia/Shanghai" 或 "UTC"。
  string timezone = 10;

  // Sampling and rate limit configuration.
  // 日志采样与限流配置。
  message Sampling {
    // Enable sampling/ratelimiting.
    // 是否启用采样/限流。
    bool enable = 1;

    // Fraction 0..1 to keep info logs.
    // info 级别采样比例（0..1）。
    float info_ratio = 2;

    // Fraction 0..1 to keep debug logs.
    // debug 级别采样比例（0..1）。
    float debug_ratio = 3;

    // Max info logs per second (0 = unlimited).
    // 每秒最大 info 日志条数（0 为不限制）。
    int32 max_info_per_sec = 4;

    // Max debug logs per second (0 = unlimited).
    // 每秒最大 debug 日志条数（0 为不限制）。
    int32 max_debug_per_sec = 5;
  }

  // Sampling config.
  // 采样与限流配置。
  Sampling sampling = 11;
}

